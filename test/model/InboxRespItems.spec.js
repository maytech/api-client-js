/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi);
  }
}(this, function(expect, QuatrixApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.InboxRespItems();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InboxRespItems', function() {
    it('should create an instance of InboxRespItems', function() {
      expect(instance).to.be.a(QuatrixApi.InboxRespItems);
    });

    it('should have the property id (base name: "id")', function() {
      expect(instance).to.have.property("id");
    });

    it('should have the property senderName (base name: "sender_name")', function() {
      expect(instance).to.have.property("sender_name");
    });

    it('should have the property activates (base name: "activates")', function() {
      expect(instance).to.have.property("activates");
    });

    it('should have the property isReply (base name: "is_reply")', function() {
      expect(instance).to.have.property("is_reply");
    });

    it('should have the property replied (base name: "replied")', function() {
      expect(instance).to.have.property("replied");
    });

    it('should have the property subject (base name: "subject")', function() {
      expect(instance).to.have.property("subject");
    });

    it('should have the property type (base name: "type")', function() {
      expect(instance).to.have.property("type");
    });

    it('should have the property fileRequest (base name: "file_request")', function() {
      expect(instance).to.have.property("file_request");
    });

    it('should have the property expires (base name: "expires")', function() {
      expect(instance).to.have.property("expires");
    });

    it('should have the property _protected (base name: "protected")', function() {
      expect(instance).to.have.property("protected");
    });

  });

}));
