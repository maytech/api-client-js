/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi);
  }
}(this, function(expect, QuatrixApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.ProfileResp();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProfileResp', function() {
    it('should create an instance of ProfileResp', function() {
      expect(instance).to.be.a(QuatrixApi.ProfileResp);
    });

    it('should have the property id (base name: "id")', function() {
      expect(instance).to.have.property("id");
    });

    it('should have the property name (base name: "name")', function() {
      expect(instance).to.have.property("name");
    });

    it('should have the property email (base name: "email")', function() {
      expect(instance).to.have.property("email");
    });

    it('should have the property superAdmin (base name: "super_admin")', function() {
      expect(instance).to.have.property("super_admin");
    });

    it('should have the property homeId (base name: "home_id")', function() {
      expect(instance).to.have.property("home_id");
    });

    it('should have the property operations (base name: "operations")', function() {
      expect(instance).to.have.property("operations");
    });

    it('should have the property maxFileSize (base name: "max_file_size")', function() {
      expect(instance).to.have.property("max_file_size");
    });

    it('should have the property maxFilesPerShare (base name: "max_files_per_share")', function() {
      expect(instance).to.have.property("max_files_per_share");
    });

    it('should have the property plan (base name: "plan")', function() {
      expect(instance).to.have.property("plan");
    });

    it('should have the property isContact (base name: "is_contact")', function() {
      expect(instance).to.have.property("is_contact");
    });

    it('should have the property language (base name: "language")', function() {
      expect(instance).to.have.property("language");
    });

    it('should have the property channelId (base name: "channel_id")', function() {
      expect(instance).to.have.property("channel_id");
    });

    it('should have the property accountId (base name: "account_id")', function() {
      expect(instance).to.have.property("account_id");
    });

    it('should have the property storageId (base name: "storage_id")', function() {
      expect(instance).to.have.property("storage_id");
    });

    it('should have the property created (base name: "created")', function() {
      expect(instance).to.have.property("created");
    });

    it('should have the property modified (base name: "modified")', function() {
      expect(instance).to.have.property("modified");
    });

    it('should have the property quota (base name: "quota")', function() {
      expect(instance).to.have.property("quota");
    });

    it('should have the property status (base name: "status")', function() {
      expect(instance).to.have.property("status");
    });

    it('should have the property uid (base name: "uid")', function() {
      expect(instance).to.have.property("uid");
    });

    it('should have the property gid (base name: "gid")', function() {
      expect(instance).to.have.property("gid");
    });

    it('should have the property hasKey (base name: "has_key")', function() {
      expect(instance).to.have.property("has_key");
    });

    it('should have the property pgpEnabled (base name: "pgp_enabled")', function() {
      expect(instance).to.have.property("pgp_enabled");
    });

    it('should have the property messageSignature (base name: "message_signature")', function() {
      expect(instance).to.have.property("message_signature");
    });

    it('should have the property outgoingId (base name: "outgoing_id")', function() {
      expect(instance).to.have.property("outgoing_id");
    });

    it('should have the property incomingId (base name: "incoming_id")', function() {
      expect(instance).to.have.property("incoming_id");
    });

    it('should have the property services (base name: "services")', function() {
      expect(instance).to.have.property("services");
    });

    it('should have the property shareTypes (base name: "share_types")', function() {
      expect(instance).to.have.property("share_types");
    });

    it('should have the property uniqueLogin (base name: "unique_login")', function() {
      expect(instance).to.have.property("unique_login");
    });

    it('should have the property authMethods (base name: "auth_methods")', function() {
      expect(instance).to.have.property("auth_methods");
    });

    it('should have the property accountStatus (base name: "account_status")', function() {
      expect(instance).to.have.property("account_status");
    });

    it('should have the property sftpUrl (base name: "sftp_url")', function() {
      expect(instance).to.have.property("sftp_url");
    });

    it('should have the property forcedAuth (base name: "forced_auth")', function() {
      expect(instance).to.have.property("forced_auth");
    });

  });

}));
