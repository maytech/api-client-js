/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi);
  }
}(this, function(expect, QuatrixApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.PGPApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PGPApi', function() {
    describe('contactPgpKeyIdGet', function() {
      it('should call contactPgpKeyIdGet successfully', function(done) {
        //uncomment below and update the code to test contactPgpKeyIdGet
        //instance.contactPgpKeyIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('keyRequestMetadataIdGet', function() {
      it('should call keyRequestMetadataIdGet successfully', function(done) {
        //uncomment below and update the code to test keyRequestMetadataIdGet
        //instance.keyRequestMetadataIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('keyRequestRespondIdPost', function() {
      it('should call keyRequestRespondIdPost successfully', function(done) {
        //uncomment below and update the code to test keyRequestRespondIdPost
        //instance.keyRequestRespondIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyCreatePost', function() {
      it('should call pgpKeyCreatePost successfully', function(done) {
        //uncomment below and update the code to test pgpKeyCreatePost
        //instance.pgpKeyCreatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyDeleteIdGet', function() {
      it('should call pgpKeyDeleteIdGet successfully', function(done) {
        //uncomment below and update the code to test pgpKeyDeleteIdGet
        //instance.pgpKeyDeleteIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyEditIdPost', function() {
      it('should call pgpKeyEditIdPost successfully', function(done) {
        //uncomment below and update the code to test pgpKeyEditIdPost
        //instance.pgpKeyEditIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyMetadataIdGet', function() {
      it('should call pgpKeyMetadataIdGet successfully', function(done) {
        //uncomment below and update the code to test pgpKeyMetadataIdGet
        //instance.pgpKeyMetadataIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyRecipientsPost', function() {
      it('should call pgpKeyRecipientsPost successfully', function(done) {
        //uncomment below and update the code to test pgpKeyRecipientsPost
        //instance.pgpKeyRecipientsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pgpKeyRequestPost', function() {
      it('should call pgpKeyRequestPost successfully', function(done) {
        //uncomment below and update the code to test pgpKeyRequestPost
        //instance.pgpKeyRequestPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userPgpKeyIdGet', function() {
      it('should call userPgpKeyIdGet successfully', function(done) {
        //uncomment below and update the code to test userPgpKeyIdGet
        //instance.userPgpKeyIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
