/**
 * Quatrix API
 * File Transfer And Sharing API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index", "sinon"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"), require("sinon"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi, root.sinon);
  }
})(this, function(expect, QuatrixApi, sinon) {
  "use strict";

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.FileApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === "function") return object[getter]();
    else return object[property];
  };

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === "function") object[setter](value);
    else object[property] = value;
  };

  describe("FileApi", function() {
    describe("fileAddTagIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileAddTagIdPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileAddTagIdPost"
          );
        });
      });

      it("should throw error if body is missed", function() {
        expect(instance.fileAddTagIdPost)
          .withArgs("id")
          .to.throwException(function(e) {
            expect(e.message).to.be.equal(
              "Missing the required parameter 'body' when calling fileAddTagIdPost"
            );
          });
      });

      it("should call fileAddTagIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var body = "body";
        var callback = "callback";
        var result = instance.fileAddTagIdPost(id, body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/add-tag/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileCopyPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileCopyPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileCopyPost"
          );
        });
      });

      it("should call fileCopyPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileCopyPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal("/file/copy");
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileDeletePost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileDeletePost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileDeletePost"
          );
        });
      });

      it("should call fileDeletePost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileDeletePost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/delete"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileDiffIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileDiffIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileDiffIdGet"
          );
        });
      });

      it("should throw error if from is missed", function() {
        expect(instance.fileDiffIdGet)
          .withArgs("id")
          .to.throwException(function(e) {
            expect(e.message).to.be.equal(
              "Missing the required parameter 'from' when calling fileDiffIdGet"
            );
          });
      });

      it("should call fileDiffIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var from = "from";
        var opts = {
          to: "to"
        };
        var callback = "callback";
        var result = instance.fileDiffIdGet(id, from, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/diff/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          from: "from",
          to: "to"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileDownloadIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileDownloadIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileDownloadIdGet"
          );
        });
      });

      it("should call fileDownloadIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.fileDownloadIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/download/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/octet-stream"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileDownloadLinkPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileDownloadLinkPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileDownloadLinkPost"
          );
        });
      });

      it("should call fileDownloadLinkPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileDownloadLinkPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/download-link"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileInfoIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileInfoIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileInfoIdGet"
          );
        });
      });

      it("should call fileInfoIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.fileInfoIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/info/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileMakedirPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileMakedirPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileMakedirPost"
          );
        });
      });

      it("should call fileMakedirPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileMakedirPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/makedir"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileMetadataGet", function() {
      it("should call fileMetadataGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var opts = {
          content: "content"
        };
        var callback = "callback";
        var result = instance.fileMetadataGet(opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/metadata"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          content: "content"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileMetadataIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileMetadataIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileMetadataIdGet"
          );
        });
      });

      it("should call fileMetadataIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var opts = {
          content: "content"
        };
        var callback = "callback";
        var result = instance.fileMetadataIdGet(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/metadata/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          content: "content"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileMetadataPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileMetadataPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileMetadataPost"
          );
        });
      });

      it("should call fileMetadataPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileMetadataPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/metadata"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileModifyPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileModifyPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileModifyPost"
          );
        });
      });

      it("should call fileModifyPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileModifyPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/modify"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileMovePost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileMovePost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileMovePost"
          );
        });
      });

      it("should call fileMovePost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileMovePost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal("/file/move");
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("filePreviewIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.filePreviewIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling filePreviewIdGet"
          );
        });
      });

      it("should call filePreviewIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.filePreviewIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/preview/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileRenameIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileRenameIdPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileRenameIdPost"
          );
        });
      });

      it("should throw error if id is missed", function() {
        expect(instance.fileRenameIdPost)
          .withArgs("id")
          .to.throwException(function(e) {
            expect(e.message).to.be.equal(
              "Missing the required parameter 'body' when calling fileRenameIdPost"
            );
          });
      });

      it("should call fileRenameIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var body = "body";
        var callback = "callback";
        var result = instance.fileRenameIdPost(id, body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/rename/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileSearchPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.fileSearchPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling fileSearchPost"
          );
        });
      });

      it("should call fileSearchPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.fileSearchPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/search"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Array);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileTagsIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileTagsIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileTagsIdGet"
          );
        });
      });

      it("should call fileTagsIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.fileTagsIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/tags/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Array);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("fileWopiTokenIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.fileWopiTokenIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling fileWopiTokenIdGet"
          );
        });
      });

      it("should call fileWopiTokenIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.fileWopiTokenIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/file/wopi-token/{id}",
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
  });
});
