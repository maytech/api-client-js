/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi);
  }
}(this, function(expect, QuatrixApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.FileApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FileApi', function() {
    describe('fileAddTagIdPost', function() {
      it('should call fileAddTagIdPost successfully', function(done) {
        //uncomment below and update the code to test fileAddTagIdPost
        //instance.fileAddTagIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileCopyPost', function() {
      it('should call fileCopyPost successfully', function(done) {
        //uncomment below and update the code to test fileCopyPost
        //instance.fileCopyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileCsvIdGet', function() {
      it('should call fileCsvIdGet successfully', function(done) {
        //uncomment below and update the code to test fileCsvIdGet
        //instance.fileCsvIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileDeletePost', function() {
      it('should call fileDeletePost successfully', function(done) {
        //uncomment below and update the code to test fileDeletePost
        //instance.fileDeletePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileDiffIdGet', function() {
      it('should call fileDiffIdGet successfully', function(done) {
        //uncomment below and update the code to test fileDiffIdGet
        //instance.fileDiffIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileDownloadIdGet', function() {
      it('should call fileDownloadIdGet successfully', function(done) {
        //uncomment below and update the code to test fileDownloadIdGet
        //instance.fileDownloadIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileDownloadLinkPost', function() {
      it('should call fileDownloadLinkPost successfully', function(done) {
        //uncomment below and update the code to test fileDownloadLinkPost
        //instance.fileDownloadLinkPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileEmptyTrashIdPost', function() {
      it('should call fileEmptyTrashIdPost successfully', function(done) {
        //uncomment below and update the code to test fileEmptyTrashIdPost
        //instance.fileEmptyTrashIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileInfoIdGet', function() {
      it('should call fileInfoIdGet successfully', function(done) {
        //uncomment below and update the code to test fileInfoIdGet
        //instance.fileInfoIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileMakedirPost', function() {
      it('should call fileMakedirPost successfully', function(done) {
        //uncomment below and update the code to test fileMakedirPost
        //instance.fileMakedirPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileMetadataGet', function() {
      it('should call fileMetadataGet successfully', function(done) {
        //uncomment below and update the code to test fileMetadataGet
        //instance.fileMetadataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileMetadataIdGet', function() {
      it('should call fileMetadataIdGet successfully', function(done) {
        //uncomment below and update the code to test fileMetadataIdGet
        //instance.fileMetadataIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileMetadataPost', function() {
      it('should call fileMetadataPost successfully', function(done) {
        //uncomment below and update the code to test fileMetadataPost
        //instance.fileMetadataPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileModifyPost', function() {
      it('should call fileModifyPost successfully', function(done) {
        //uncomment below and update the code to test fileModifyPost
        //instance.fileModifyPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileMovePost', function() {
      it('should call fileMovePost successfully', function(done) {
        //uncomment below and update the code to test fileMovePost
        //instance.fileMovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filePreviewIdGet', function() {
      it('should call filePreviewIdGet successfully', function(done) {
        //uncomment below and update the code to test filePreviewIdGet
        //instance.filePreviewIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileRenameIdPost', function() {
      it('should call fileRenameIdPost successfully', function(done) {
        //uncomment below and update the code to test fileRenameIdPost
        //instance.fileRenameIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileSearchPost', function() {
      it('should call fileSearchPost successfully', function(done) {
        //uncomment below and update the code to test fileSearchPost
        //instance.fileSearchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileSizeIdGet', function() {
      it('should call fileSizeIdGet successfully', function(done) {
        //uncomment below and update the code to test fileSizeIdGet
        //instance.fileSizeIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileTagsIdGet', function() {
      it('should call fileTagsIdGet successfully', function(done) {
        //uncomment below and update the code to test fileTagsIdGet
        //instance.fileTagsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
