/**
 * Quatrix API
 * File Transfer And Sharing API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index", "sinon"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"), require("sinon"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi, root.sinon);
  }
})(this, function(expect, QuatrixApi, sinon) {
  "use strict";

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.ProfileApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === "function") return object[getter]();
    else return object[property];
  };

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === "function") object[setter](value);
    else object[property] = value;
  };

  describe("ProfileApi", function() {
    describe("profile2faGenerateGet", function() {
      it("should call profile2faGenerateGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.profile2faGenerateGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/2fa/generate"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileGet", function() {
      it("should call profileGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.profileGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal("/profile");
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileInfoGet", function() {
      it("should call profileInfoGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.profileInfoGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/info"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileRemoveMfaPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.profileRemoveMfaPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling profileRemoveMfaPost"
          );
        });
      });

      it("should call profileRemoveMfaPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.profileRemoveMfaPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/remove-mfa"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileSetMfaPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.profileSetMfaPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling profileSetMfaPost"
          );
        });
      });

      it("should call profileSetMfaPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.profileSetMfaPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/set-mfa"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileSetPasswordPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.profileSetPasswordPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling profileSetPasswordPost"
          );
        });
      });

      it("should call profileSetPasswordPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.profileSetPasswordPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/set-password"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("profileSetPost", function() {
      it("should call profileSetPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var opts = {
          body: "body"
        };
        var callback = "callback";
        var result = instance.profileSetPost(opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/profile/set"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
  });
});
