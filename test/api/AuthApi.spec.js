/**
 * Quatrix API
 * File Transfer And Sharing API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index", "sinon"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"), require("sinon"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi, root.sinon);
  }
})(this, function(expect, QuatrixApi, sinon) {
  "use strict";

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.AuthApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === "function") return object[getter]();
    else return object[property];
  };

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === "function") object[setter](value);
    else object[property] = value;
  };

  describe("AuthApi", function() {
    describe("sessionKeepaliveGet", function() {
      it("should call sessionKeepaliveGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.sessionKeepaliveGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/session/keepalive"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("sessionLoginGet", function() {
      it("should call sessionLoginGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.sessionLoginGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/session/login"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["basicAuth"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("sessionLoginPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.sessionLoginPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling sessionLoginPost"
          );
        });
      });

      it("should call sessionLoginPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.sessionLoginPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/session/login"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("sessionLogoutGet", function() {
      it("should call sessionLogoutGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var callback = "callback";
        var result = instance.sessionLogoutGet(callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/session/logout"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("sessionUnblockCaptchaPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.sessionUnblockCaptchaPost).to.throwException(function(
          e
        ) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling sessionUnblockCaptchaPost"
          );
        });
      });

      it("should call sessionUnblockCaptchaPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.sessionUnblockCaptchaPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/session/unblock-captcha"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
  });
});
