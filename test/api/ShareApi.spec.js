/**
 * Quatrix API
 * File Transfer And Sharing API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index", "sinon"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"), require("sinon"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuatrixApi, root.sinon);
  }
})(this, function(expect, QuatrixApi, sinon) {
  "use strict";

  var instance;

  beforeEach(function() {
    instance = new QuatrixApi.ShareApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === "function") return object[getter]();
    else return object[property];
  };

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === "function") object[setter](value);
    else object[property] = value;
  };

  describe("ShareApi", function() {
    describe("filesReturnMakedirIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.filesReturnMakedirIdPost).to.throwException(function(
          e
        ) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling filesReturnMakedirIdPost"
          );
        });
      });

      it("should throw error if body is missed", function() {
        expect(instance.filesReturnMakedirIdPost)
          .withArgs("id")
          .to.throwException(function(e) {
            expect(e.message).to.be.equal(
              "Missing the required parameter 'body' when calling filesReturnMakedirIdPost"
            );
          });
      });

      it("should call filesReturnMakedirIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var body = "body";
        var callback = "callback";
        var result = instance.filesReturnMakedirIdPost(id, body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/files-return/makedir/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("filesReturnMetadataIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.filesReturnMetadataIdGet).to.throwException(function(
          e
        ) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling filesReturnMetadataIdGet"
          );
        });
      });

      it("should call filesReturnMetadataIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.filesReturnMetadataIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/files-return/metadata/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("filesReturnSendPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.filesReturnSendPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling filesReturnSendPost"
          );
        });
      });

      it("should call filesReturnSendPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.filesReturnSendPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/files-return/send"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("filesReturnUploadLinkIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.filesReturnUploadLinkIdPost).to.throwException(function(
          e
        ) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling filesReturnUploadLinkIdPost"
          );
        });
      });

      it("should throw error if body is missed", function() {
        expect(instance.filesReturnUploadLinkIdPost)
          .withArgs("id")
          .to.throwException(function(e) {
            expect(e.message).to.be.equal(
              "Missing the required parameter 'body' when calling filesReturnUploadLinkIdPost"
            );
          });
      });

      it("should call filesReturnUploadLinkIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var body = "body";
        var callback = "callback";
        var result = instance.filesReturnUploadLinkIdPost(id, body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/files-return/upload-link/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("quicklinkCreatePost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.quicklinkCreatePost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling quicklinkCreatePost"
          );
        });
      });

      it("should call quicklinkCreatePost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.quicklinkCreatePost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/quicklink/create"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("quicklinkLoginPinPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.quicklinkLoginPinPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling quicklinkLoginPinPost"
          );
        });
      });

      it("should call quicklinkLoginPinPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.quicklinkLoginPinPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/quicklink/login-pin"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("quicklinkRevokeIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.quicklinkRevokeIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling quicklinkRevokeIdGet"
          );
        });
      });

      it("should call quicklinkRevokeIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.quicklinkRevokeIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/quicklink/revoke/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareCreatePost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.shareCreatePost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling shareCreatePost"
          );
        });
      });

      it("should call shareCreatePost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.shareCreatePost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/create"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareDownloadIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareDownloadIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareDownloadIdGet"
          );
        });
      });

      it("should call shareDownloadIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var opts = {
          files: "files"
        };
        var callback = "callback";
        var result = instance.shareDownloadIdGet(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/download/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({
          files: {
            value: "files",
            collectionFormat: "csv"
          }
        });
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql([]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/octet-stream"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareDownloadInfoIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareDownloadInfoIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareDownloadInfoIdGet"
          );
        });
      });

      it("should call shareDownloadInfoIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.shareDownloadInfoIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/download-info/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareDownloadLinkIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareDownloadLinkIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareDownloadLinkIdGet"
          );
        });
      });

      it("should call shareDownloadLinkIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.shareDownloadLinkIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/download-link/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareDownloadLinkIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareDownloadLinkIdPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareDownloadLinkIdPost"
          );
        });
      });

      it("should call shareDownloadLinkIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var opts = {
          body: "body"
        };
        var callback = "callback";
        var result = instance.shareDownloadLinkIdPost(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/download-link/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareFilesIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareFilesIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareFilesIdGet"
          );
        });
      });

      it("should call shareFilesIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.shareFilesIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/files/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Array);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareLoginPinPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.shareLoginPinPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling shareLoginPinPost"
          );
        });
      });

      it("should call shareLoginPinPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.shareLoginPinPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/login-pin"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("sharePreviewIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.sharePreviewIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling sharePreviewIdGet"
          );
        });
      });

      it("should call sharePreviewIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var opts = {
          size: "size"
        };
        var callback = "callback";
        var result = instance.sharePreviewIdGet(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/preview/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          size: "size"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql(["image/png"]);
        expect(instance.apiClient.callApi.args[0][11]).to.be(null);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareRecipientsGet", function() {
      it("should call shareRecipientsGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var opts = {
          email: "email"
        };
        var callback = "callback";
        var result = instance.shareRecipientsGet(opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/recipients"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          email: "email"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareRequestPost", function() {
      it("should throw error if body is missed", function() {
        expect(instance.shareRequestPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'body' when calling shareRequestPost"
          );
        });
      });

      it("should call shareRequestPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var body = "body";
        var callback = "callback";
        var result = instance.shareRequestPost(body, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/request"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareRevokeIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareRevokeIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareRevokeIdGet"
          );
        });
      });

      it("should call shareRevokeIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var callback = "callback";
        var result = instance.shareRevokeIdGet(id, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/revoke/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("shareSendRequestIdPost", function() {
      it("should throw error if id is missed", function() {
        expect(instance.shareSendRequestIdPost).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling shareSendRequestIdPost"
          );
        });
      });

      it("should call shareSendRequestIdPost successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id";
        var opts = {
          body: "body"
        };
        var callback = "callback";
        var result = instance.shareSendRequestIdPost(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal(
          "/share/send-request/{id}"
        );
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("POST");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: "id"
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({});
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be.equal("body");
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Function);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("trackingGet", function() {
      it("should call trackingGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var opts = {
          _date: "_date"
        };
        var callback = "callback";
        var result = instance.trackingGet(opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal("/tracking/");
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({});
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          date: "_date"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Array);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
    describe("trackingIdGet", function() {
      it("should throw error if id is missed", function() {
        expect(instance.trackingIdGet).to.throwException(function(e) {
          expect(e.message).to.be.equal(
            "Missing the required parameter 'id' when calling trackingIdGet"
          );
        });
      });

      it("should call trackingIdGet successfully", function() {
        instance.apiClient.callApi = sinon.stub().returns("result");
        var id = "id"
        var opts = {
          _date: "_date"
        };
        var callback = "callback";
        var result = instance.trackingIdGet(id, opts, callback);
        expect(result).to.be.equal("result");
        expect(instance.apiClient.callApi.calledOnce).to.be(true);
        expect(instance.apiClient.callApi.args[0][0]).to.be.equal("/tracking/{id}");
        expect(instance.apiClient.callApi.args[0][1]).to.be.equal("GET");
        expect(instance.apiClient.callApi.args[0][2]).to.eql({
          id: 'id'
        });
        expect(instance.apiClient.callApi.args[0][3]).to.eql({
          date: "_date"
        });
        expect(instance.apiClient.callApi.args[0][4]).to.eql({});
        expect(instance.apiClient.callApi.args[0][5]).to.eql({});
        expect(instance.apiClient.callApi.args[0][6]).to.eql({});
        expect(instance.apiClient.callApi.args[0][7]).to.be(null);
        expect(instance.apiClient.callApi.args[0][8]).to.eql(["api_key"]);
        expect(instance.apiClient.callApi.args[0][9]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][10]).to.eql([
          "application/json"
        ]);
        expect(instance.apiClient.callApi.args[0][11]).to.be.a(Array);
        expect(instance.apiClient.callApi.args[0][12]).to.be.equal("callback");
      });
    });
  });
});
