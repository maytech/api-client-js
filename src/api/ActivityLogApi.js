/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/TrackingActivityRespItems', 'model/TrackingCSVRespItems', 'model/TrackingDownloadsRespItems', 'model/TrackingFilesRespItems'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/TrackingActivityRespItems'), require('../model/TrackingCSVRespItems'), require('../model/TrackingDownloadsRespItems'), require('../model/TrackingFilesRespItems'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ActivityLogApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.TrackingActivityRespItems, root.QuatrixApi.TrackingCSVRespItems, root.QuatrixApi.TrackingDownloadsRespItems, root.QuatrixApi.TrackingFilesRespItems);
  }
}(this, function(ApiClient, ErrorModel, TrackingActivityRespItems, TrackingCSVRespItems, TrackingDownloadsRespItems, TrackingFilesRespItems) {
  'use strict';

  /**
   * ActivityLog service.
   * @module api/ActivityLogApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ActivityLogApi. 
   * @alias module:api/ActivityLogApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the trackingActivityGet operation.
     * @callback module:api/ActivityLogApi~trackingActivityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingActivityRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activity log
     * List activity (action) log. For details - https://dev.maytech.net/wiki/display/ISV3/Activity+Log 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Log id
     * @param {String} opts.userId User id
     * @param {Number} opts.limit Rows per page (default to 100)
     * @param {Number} opts.from UTC timestamp (default to 0)
     * @param {Number} opts.to UTC timestamp
     * @param {module:api/ActivityLogApi~trackingActivityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingActivityRespItems>}
     */
    this.trackingActivityGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'user_id': opts['userId'],
        'limit': opts['limit'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrackingActivityRespItems];

      return this.apiClient.callApi(
        '/tracking/activity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingCsvGet operation.
     * @callback module:api/ActivityLogApi~trackingCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingCSVRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download CSV file with Activity Log
     * Download CSV file content with Activity Log. For details - https://dev.maytech.net/wiki/display/ISV3/Activity+Log 
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId User id
     * @param {Number} opts.from UTC timestamp
     * @param {Number} opts.to UTC timestamp
     * @param {module:api/ActivityLogApi~trackingCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingCSVRespItems>}
     */
    this.trackingCsvGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user_id': opts['userId'],
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['text/csv'];
      var returnType = [TrackingCSVRespItems];

      return this.apiClient.callApi(
        '/tracking/csv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingDownloadsIdGet operation.
     * @callback module:api/ActivityLogApi~trackingDownloadsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingDownloadsRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share action file downloads
     * List share action file downloads 
     * @param {String} id Shared file ID
     * @param {module:api/ActivityLogApi~trackingDownloadsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingDownloadsRespItems>}
     */
    this.trackingDownloadsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trackingDownloadsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrackingDownloadsRespItems];

      return this.apiClient.callApi(
        '/tracking/downloads/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingFilesIdGet operation.
     * @callback module:api/ActivityLogApi~trackingFilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingFilesRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share action files
     * List share action files 
     * @param {String} id Share action ID
     * @param {module:api/ActivityLogApi~trackingFilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingFilesRespItems>}
     */
    this.trackingFilesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trackingFilesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrackingFilesRespItems];

      return this.apiClient.callApi(
        '/tracking/files/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
