/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AutomationCreateReq', 'model/AutomationDeleteResp', 'model/AutomationEditReq', 'model/AutomationResp', 'model/ErrorModel', 'model/IdsReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AutomationCreateReq'), require('../model/AutomationDeleteResp'), require('../model/AutomationEditReq'), require('../model/AutomationResp'), require('../model/ErrorModel'), require('../model/IdsReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.AutomationApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.AutomationCreateReq, root.QuatrixApi.AutomationDeleteResp, root.QuatrixApi.AutomationEditReq, root.QuatrixApi.AutomationResp, root.QuatrixApi.ErrorModel, root.QuatrixApi.IdsReq);
  }
}(this, function(ApiClient, AutomationCreateReq, AutomationDeleteResp, AutomationEditReq, AutomationResp, ErrorModel, IdsReq) {
  'use strict';

  /**
   * Automation service.
   * @module api/AutomationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AutomationApi. 
   * @alias module:api/AutomationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the automationCreatePost operation.
     * @callback module:api/AutomationApi~automationCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new automation
     * Add a new automatic operation. 
     * @param {module:model/AutomationCreateReq} body 
     * @param {module:api/AutomationApi~automationCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationResp}
     */
    this.automationCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling automationCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AutomationResp;

      return this.apiClient.callApi(
        '/automation/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the automationDeletePost operation.
     * @callback module:api/AutomationApi~automationDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationDeleteResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete automations
     * Delete a rule set for automatic operations. 
     * @param {module:model/IdsReq} body 
     * @param {module:api/AutomationApi~automationDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationDeleteResp}
     */
    this.automationDeletePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling automationDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AutomationDeleteResp;

      return this.apiClient.callApi(
        '/automation/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the automationEditPost operation.
     * @callback module:api/AutomationApi~automationEditPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutomationResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing automation
     * Update an existing rule for a specified automatic operation. 
     * @param {module:model/AutomationEditReq} body 
     * @param {module:api/AutomationApi~automationEditPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutomationResp>}
     */
    this.automationEditPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling automationEditPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AutomationResp];

      return this.apiClient.callApi(
        '/automation/edit/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the automationGet operation.
     * @callback module:api/AutomationApi~automationGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutomationResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all automations
     * Retrieve a list of all automations of the user. 
     * @param {module:api/AutomationApi~automationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutomationResp>}
     */
    this.automationGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AutomationResp];

      return this.apiClient.callApi(
        '/automation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the automationMetadataIdGet operation.
     * @callback module:api/AutomationApi~automationMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get automation metadata
     * Get the automation metadata by the specified automation ID. 
     * @param {String} id automation ID
     * @param {module:api/AutomationApi~automationMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationResp}
     */
    this.automationMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling automationMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AutomationResp;

      return this.apiClient.callApi(
        '/automation/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
