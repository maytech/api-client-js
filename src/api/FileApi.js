/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CopyMoveFilesReq', 'model/ErrorModel', 'model/FileAddTagReq', 'model/FileCsvResp', 'model/FileDiffResp', 'model/FileInfoResp', 'model/FileMetadataGetResp', 'model/FileMetadataPostReq', 'model/FileMetadataPostResp', 'model/FileModifyReq', 'model/FileModifyResp', 'model/FilePreviewResp', 'model/FileRenameReq', 'model/FileRenameResp', 'model/FileResp', 'model/FileSizeResp', 'model/FileTagResp', 'model/IdResp', 'model/IdsReq', 'model/IdsResp', 'model/JobResp', 'model/MakeDirReq', 'model/SearchReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CopyMoveFilesReq'), require('../model/ErrorModel'), require('../model/FileAddTagReq'), require('../model/FileCsvResp'), require('../model/FileDiffResp'), require('../model/FileInfoResp'), require('../model/FileMetadataGetResp'), require('../model/FileMetadataPostReq'), require('../model/FileMetadataPostResp'), require('../model/FileModifyReq'), require('../model/FileModifyResp'), require('../model/FilePreviewResp'), require('../model/FileRenameReq'), require('../model/FileRenameResp'), require('../model/FileResp'), require('../model/FileSizeResp'), require('../model/FileTagResp'), require('../model/IdResp'), require('../model/IdsReq'), require('../model/IdsResp'), require('../model/JobResp'), require('../model/MakeDirReq'), require('../model/SearchReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.FileApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.CopyMoveFilesReq, root.QuatrixApi.ErrorModel, root.QuatrixApi.FileAddTagReq, root.QuatrixApi.FileCsvResp, root.QuatrixApi.FileDiffResp, root.QuatrixApi.FileInfoResp, root.QuatrixApi.FileMetadataGetResp, root.QuatrixApi.FileMetadataPostReq, root.QuatrixApi.FileMetadataPostResp, root.QuatrixApi.FileModifyReq, root.QuatrixApi.FileModifyResp, root.QuatrixApi.FilePreviewResp, root.QuatrixApi.FileRenameReq, root.QuatrixApi.FileRenameResp, root.QuatrixApi.FileResp, root.QuatrixApi.FileSizeResp, root.QuatrixApi.FileTagResp, root.QuatrixApi.IdResp, root.QuatrixApi.IdsReq, root.QuatrixApi.IdsResp, root.QuatrixApi.JobResp, root.QuatrixApi.MakeDirReq, root.QuatrixApi.SearchReq);
  }
}(this, function(ApiClient, CopyMoveFilesReq, ErrorModel, FileAddTagReq, FileCsvResp, FileDiffResp, FileInfoResp, FileMetadataGetResp, FileMetadataPostReq, FileMetadataPostResp, FileModifyReq, FileModifyResp, FilePreviewResp, FileRenameReq, FileRenameResp, FileResp, FileSizeResp, FileTagResp, IdResp, IdsReq, IdsResp, JobResp, MakeDirReq, SearchReq) {
  'use strict';

  /**
   * File service.
   * @module api/FileApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FileApi. 
   * @alias module:api/FileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the fileAddTagIdPost operation.
     * @callback module:api/FileApi~fileAddTagIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileTagResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a file tag
     * Add a tag to filter the file list. 
     * @param {String} id ID of a file
     * @param {module:model/FileAddTagReq} body 
     * @param {module:api/FileApi~fileAddTagIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileTagResp}
     */
    this.fileAddTagIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileAddTagIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileAddTagIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileTagResp;

      return this.apiClient.callApi(
        '/file/add-tag/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileCopyPost operation.
     * @callback module:api/FileApi~fileCopyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy files
     * Creates a copy of a file or a folder. The original version of the file will not be changed. On success 202 response it returns “job_id”. To check the result, see the API call “job/status\&quot;. 
     * @param {module:model/CopyMoveFilesReq} body 
     * @param {module:api/FileApi~fileCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResp}
     */
    this.fileCopyPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileCopyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobResp;

      return this.apiClient.callApi(
        '/file/copy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileCsvIdGet operation.
     * @callback module:api/FileApi~fileCsvIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileCsvResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download CSV file with Folder Content
     * Return CSV file with information containing file metadata. It contains the path for each file displaying the hierarchy of files. This API returns the content-type: ”raw\&quot;. 
     * @param {String} id File action ID
     * @param {module:api/FileApi~fileCsvIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileCsvResp}
     */
    this.fileCsvIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileCsvIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['text/csv'];
      var returnType = FileCsvResp;

      return this.apiClient.callApi(
        '/file/csv/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDeletePost operation.
     * @callback module:api/FileApi~fileDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete files
     * Move a file or folder to Trash. If you delete less than 10 files, it returns 200 and the IDs of the deleted files. In case you delete more than 10 files, the API returns 202 response. 
     * @param {module:model/IdsReq} body 
     * @param {module:api/FileApi~fileDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdsResp}
     */
    this.fileDeletePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdsResp;

      return this.apiClient.callApi(
        '/file/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDiffIdGet operation.
     * @callback module:api/FileApi~fileDiffIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDiffResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display changes of the file
     * Get file changes for specified preiod. 
     * @param {String} id ID of a file
     * @param {Number} from 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.to 
     * @param {module:api/FileApi~fileDiffIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDiffResp}
     */
    this.fileDiffIdGet = function(id, from, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileDiffIdGet");
      }

      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling fileDiffIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'from': from,
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileDiffResp;

      return this.apiClient.callApi(
        '/file/diff/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDownloadIdGet operation.
     * @callback module:api/FileApi~fileDownloadIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * Download a file or files by given ID. Multiple file download returns files in Zip format. 
     * @param {String} id ID of a file download link
     * @param {module:api/FileApi~fileDownloadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fileDownloadIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileDownloadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/file/download/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDownloadLinkPost operation.
     * @callback module:api/FileApi~fileDownloadLinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get download link
     * Get a unique key for downloading files. 
     * @param {module:model/IdsReq} body 
     * @param {module:api/FileApi~fileDownloadLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.fileDownloadLinkPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileDownloadLinkPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/file/download-link', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileEmptyTrashIdPost operation.
     * @callback module:api/FileApi~fileEmptyTrashIdPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty trash
     * Permanently delete all files from Trash by the given Trash ID. If the ID is not provided, empty the Trash of the logged-in user. 
     * @param {String} id ID of a file
     * @param {module:api/FileApi~fileEmptyTrashIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.fileEmptyTrashIdPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileEmptyTrashIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/file/empty-trash/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileInfoIdGet operation.
     * @callback module:api/FileApi~fileInfoIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file info
     * Retrieve the file information by the specified ID. 
     * @param {String} id ID of a file
     * @param {module:api/FileApi~fileInfoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileInfoResp}
     */
    this.fileInfoIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileInfoIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileInfoResp;

      return this.apiClient.callApi(
        '/file/info/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileMakedirPost operation.
     * @callback module:api/FileApi~fileMakedirPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new folder
     * Create a new folder 
     * @param {module:model/MakeDirReq} body 
     * @param {module:api/FileApi~fileMakedirPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResp}
     */
    this.fileMakedirPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileMakedirPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileResp;

      return this.apiClient.callApi(
        '/file/makedir', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileMetadataGet operation.
     * @callback module:api/FileApi~fileMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadataGetResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata of files
     * Get information about files in the current User Home folder. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.content Return content flag (default to 1)
     * @param {module:api/FileApi~fileMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadataGetResp}
     */
    this.fileMetadataGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'content': opts['content'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileMetadataGetResp;

      return this.apiClient.callApi(
        '/file/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileMetadataIdGet operation.
     * @callback module:api/FileApi~fileMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadataGetResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all file metadata
     * Retrieve all metadata associated with a given file. If ID endpoint is not provided, get the metadata of a current Use Home folder. 
     * @param {String} id ID of a file
     * @param {Object} opts Optional parameters
     * @param {Number} opts.content Return content flag (default to 1)
     * @param {module:api/FileApi~fileMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadataGetResp}
     */
    this.fileMetadataIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'content': opts['content'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileMetadataGetResp;

      return this.apiClient.callApi(
        '/file/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileMetadataPost operation.
     * @callback module:api/FileApi~fileMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadataPostResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify file metadata
     * Update file metadata with the given payload. 
     * @param {module:model/FileMetadataPostReq} body 
     * @param {module:api/FileApi~fileMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadataPostResp}
     */
    this.fileMetadataPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileMetadataPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileMetadataPostResp;

      return this.apiClient.callApi(
        '/file/metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileModifyPost operation.
     * @callback module:api/FileApi~fileModifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileModifyResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file modification link
     * Get file modification link 
     * @param {module:model/FileModifyReq} body 
     * @param {module:api/FileApi~fileModifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileModifyResp}
     */
    this.fileModifyPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileModifyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileModifyResp;

      return this.apiClient.callApi(
        '/file/modify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileMovePost operation.
     * @callback module:api/FileApi~fileMovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move files
     * Move a file or folder from one location to another. 
     * @param {module:model/CopyMoveFilesReq} body 
     * @param {module:api/FileApi~fileMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdsResp}
     */
    this.fileMovePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileMovePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdsResp;

      return this.apiClient.callApi(
        '/file/move', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filePreviewIdGet operation.
     * @callback module:api/FileApi~filePreviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilePreviewResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a file preview
     * Retrieve a file preview by the given ID of the file. 
     * @param {String} id ID of a file
     * @param {module:api/FileApi~filePreviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilePreviewResp}
     */
    this.filePreviewIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filePreviewIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilePreviewResp;

      return this.apiClient.callApi(
        '/file/preview/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileRenameIdPost operation.
     * @callback module:api/FileApi~fileRenameIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileRenameResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a file
     * Change a file name. 
     * @param {String} id ID of a file
     * @param {module:model/FileRenameReq} body 
     * @param {module:api/FileApi~fileRenameIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileRenameResp}
     */
    this.fileRenameIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileRenameIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileRenameIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileRenameResp;

      return this.apiClient.callApi(
        '/file/rename/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSearchPost operation.
     * @callback module:api/FileApi~fileSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search files
     * Search any file by the given directory. 
     * @param {module:model/SearchReq} body 
     * @param {module:api/FileApi~fileSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileResp>}
     */
    this.fileSearchPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fileSearchPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FileResp];

      return this.apiClient.callApi(
        '/file/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileSizeIdGet operation.
     * @callback module:api/FileApi~fileSizeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileSizeResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file size
     * Get details about the file size by the given ID. 
     * @param {String} id ID of a file
     * @param {module:api/FileApi~fileSizeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileSizeResp}
     */
    this.fileSizeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileSizeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileSizeResp;

      return this.apiClient.callApi(
        '/file/size/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fileTagsIdGet operation.
     * @callback module:api/FileApi~fileTagsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileTagResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of file tags
     * Retrieve a list of available file tags. 
     * @param {String} id ID of a file
     * @param {module:api/FileApi~fileTagsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileTagResp>}
     */
    this.fileTagsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fileTagsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FileTagResp];

      return this.apiClient.callApi(
        '/file/tags/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
