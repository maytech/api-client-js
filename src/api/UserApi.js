/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/Group', 'model/JobResp', 'model/PgpKeyResp', 'model/ProfileRemoveMfaResp', 'model/UserCreateReq', 'model/UserDeleteReq', 'model/UserEditReq', 'model/UserRemoveMfaReq', 'model/UserResetMfaReq', 'model/UserResp', 'model/UserSetMfaReq', 'model/UserSignupReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/Group'), require('../model/JobResp'), require('../model/PgpKeyResp'), require('../model/ProfileRemoveMfaResp'), require('../model/UserCreateReq'), require('../model/UserDeleteReq'), require('../model/UserEditReq'), require('../model/UserRemoveMfaReq'), require('../model/UserResetMfaReq'), require('../model/UserResp'), require('../model/UserSetMfaReq'), require('../model/UserSignupReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.UserApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.Group, root.QuatrixApi.JobResp, root.QuatrixApi.PgpKeyResp, root.QuatrixApi.ProfileRemoveMfaResp, root.QuatrixApi.UserCreateReq, root.QuatrixApi.UserDeleteReq, root.QuatrixApi.UserEditReq, root.QuatrixApi.UserRemoveMfaReq, root.QuatrixApi.UserResetMfaReq, root.QuatrixApi.UserResp, root.QuatrixApi.UserSetMfaReq, root.QuatrixApi.UserSignupReq);
  }
}(this, function(ApiClient, ErrorModel, Group, JobResp, PgpKeyResp, ProfileRemoveMfaResp, UserCreateReq, UserDeleteReq, UserEditReq, UserRemoveMfaReq, UserResetMfaReq, UserResp, UserSetMfaReq, UserSignupReq) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userCreatePost operation.
     * @callback module:api/UserApi~userCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * Add a new user to the account. The user receives an email where the password can be set. 
     * @param {module:model/UserCreateReq} body 
     * @param {module:api/UserApi~userCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResp}
     */
    this.userCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResp;

      return this.apiClient.callApi(
        '/user/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeletePost operation.
     * @callback module:api/UserApi~userDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete users
     * Remove users from the account by specified user IDs. 
     * @param {module:model/UserDeleteReq} body 
     * @param {module:api/UserApi~userDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResp}
     */
    this.userDeletePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobResp;

      return this.apiClient.callApi(
        '/user/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userEditPost operation.
     * @callback module:api/UserApi~userEditPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update metadata of users
     * Edit the existing usersâ€™ metadata. An email can be edited only for one user using one API call. In this case both old and new emails will be notified about the change. 
     * @param {module:model/UserEditReq} body 
     * @param {module:api/UserApi~userEditPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResp>}
     */
    this.userEditPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userEditPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserResp];

      return this.apiClient.callApi(
        '/user/edit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/UserApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * Retrieve a list of users 
     * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResp>}
     */
    this.userGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserResp];

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGroupGet operation.
     * @callback module:api/UserApi~userGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all user groups
     * Retrieve a list of all user groups that can be set for users. 
     * @param {module:api/UserApi~userGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    this.userGroupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Group];

      return this.apiClient.callApi(
        '/user/group', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userMetadataIdGet operation.
     * @callback module:api/UserApi~userMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user metadata
     * Retrieve userâ€™s metadata by given user ID. 
     * @param {String} id ID of a user
     * @param {module:api/UserApi~userMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResp}
     */
    this.userMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResp;

      return this.apiClient.callApi(
        '/user/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userPgpKeyIdGet operation.
     * @callback module:api/UserApi~userPgpKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PgpKeyResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user&#39;s PGP key
     * Use to retrieve PGP key generated by the user. 
     * @param {String} id ID of a user
     * @param {module:api/UserApi~userPgpKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PgpKeyResp}
     */
    this.userPgpKeyIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPgpKeyIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PgpKeyResp;

      return this.apiClient.callApi(
        '/user/pgp-key/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRemoveMfaPost operation.
     * @callback module:api/UserApi~userRemoveMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable MFA for users
     * Deactivate MFA for a user by specified user ID. If 2FA is forced for the account, the user wonâ€™t be able to deactivate it using this API call. 
     * @param {module:model/UserRemoveMfaReq} body 
     * @param {module:api/UserApi~userRemoveMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userRemoveMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userRemoveMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/remove-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userResetMfaPost operation.
     * @callback module:api/UserApi~userResetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing MFA settings for users
     * Remove already set MFA code values, the MFA will be left activated. All logged-in sessions of users will be stopped. On the next login the user should set MFA again. 
     * @param {module:model/UserResetMfaReq} body 
     * @param {module:api/UserApi~userResetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userResetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userResetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/reset-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSetMfaPost operation.
     * @callback module:api/UserApi~userSetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable MFA for users
     * Activate MFA for a user by specified user ID. If auth type is 2FA, the user will be forced to use MFA. All logged-in sessions of users will be stopped. 
     * @param {module:model/UserSetMfaReq} body 
     * @param {module:api/UserApi~userSetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userSetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userSetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/set-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSignupPost operation.
     * @callback module:api/UserApi~userSignupPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * Set password for a new user. 
     * @param {module:model/UserSignupReq} body 
     * @param {module:api/UserApi~userSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userSignupPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userSignupPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['raw'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/signup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
