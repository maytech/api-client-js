/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContactCreateReq', 'model/ContactEditResp', 'model/ContactResp', 'model/ErrorModel', 'model/IdsReq', 'model/PgpKeyResp', 'model/UserResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContactCreateReq'), require('../model/ContactEditResp'), require('../model/ContactResp'), require('../model/ErrorModel'), require('../model/IdsReq'), require('../model/PgpKeyResp'), require('../model/UserResp'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ContactApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ContactCreateReq, root.QuatrixApi.ContactEditResp, root.QuatrixApi.ContactResp, root.QuatrixApi.ErrorModel, root.QuatrixApi.IdsReq, root.QuatrixApi.PgpKeyResp, root.QuatrixApi.UserResp);
  }
}(this, function(ApiClient, ContactCreateReq, ContactEditResp, ContactResp, ErrorModel, IdsReq, PgpKeyResp, UserResp) {
  'use strict';

  /**
   * Contact service.
   * @module api/ContactApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContactApi. 
   * @alias module:api/ContactApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contactCreatePost operation.
     * @callback module:api/ContactApi~contactCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contact
     * Add a new contact to the account. The contact will be assigned a unique ID that can be used to look up the contact inside of Quatrix later. 
     * @param {module:model/ContactCreateReq} body 
     * @param {module:api/ContactApi~contactCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling contactCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactDeletePost operation.
     * @callback module:api/ContactApi~contactDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact
     * Delete an existing contact from the account. 
     * @param {module:model/IdsReq} body IDs of a contacts
     * @param {module:api/ContactApi~contactDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.contactDeletePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling contactDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/contact/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactEditIdPost operation.
     * @callback module:api/ContactApi~contactEditIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit contact metadata
     * Use to edit the existing contact details. 
     * @param {String} id ID of a contact
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactEditResp} opts.body 
     * @param {module:api/ContactApi~contactEditIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactEditIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactEditIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/edit/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactGet operation.
     * @callback module:api/ContactApi~contactGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user contacts
     * Retrieve the list of contacts (personal and site) available in the current account. 
     * @param {module:api/ContactApi~contactGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactResp>}
     */
    this.contactGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContactResp];

      return this.apiClient.callApi(
        '/contact', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactGroupGet operation.
     * @callback module:api/ContactApi~contactGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available contact groups.
     * Get a list of available contact groups. 
     * @param {module:api/ContactApi~contactGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.contactGroupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/contact/group', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactMetadataIdGet operation.
     * @callback module:api/ContactApi~contactMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact metadata
     * Retrieve contact details containing the ID, name, email, status, time it was created, PGP key details, assigned group and permissions. 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactPgpKeyIdGet operation.
     * @callback module:api/ContactApi~contactPgpKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PgpKeyResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact&#39;s PGP key
     * Use to retrieve PGP key generated by the contact. 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactPgpKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PgpKeyResp}
     */
    this.contactPgpKeyIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactPgpKeyIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PgpKeyResp;

      return this.apiClient.callApi(
        '/contact/pgp-key/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactUpgradeIdGet operation.
     * @callback module:api/ContactApi~contactUpgradeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a contact
     * Convert an existing contact to the user. 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactUpgradeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResp}
     */
    this.contactUpgradeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactUpgradeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResp;

      return this.apiClient.callApi(
        '/contact/upgrade/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
