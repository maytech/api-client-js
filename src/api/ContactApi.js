/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContactCreateReq', 'model/ContactDeleteRespItems', 'model/ContactEditResp', 'model/ContactGroupRespItems', 'model/ContactResp', 'model/ErrorModel', 'model/IdsReq', 'model/PgpKeyResp', 'model/UserResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContactCreateReq'), require('../model/ContactDeleteRespItems'), require('../model/ContactEditResp'), require('../model/ContactGroupRespItems'), require('../model/ContactResp'), require('../model/ErrorModel'), require('../model/IdsReq'), require('../model/PgpKeyResp'), require('../model/UserResp'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ContactApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ContactCreateReq, root.QuatrixApi.ContactDeleteRespItems, root.QuatrixApi.ContactEditResp, root.QuatrixApi.ContactGroupRespItems, root.QuatrixApi.ContactResp, root.QuatrixApi.ErrorModel, root.QuatrixApi.IdsReq, root.QuatrixApi.PgpKeyResp, root.QuatrixApi.UserResp);
  }
}(this, function(ApiClient, ContactCreateReq, ContactDeleteRespItems, ContactEditResp, ContactGroupRespItems, ContactResp, ErrorModel, IdsReq, PgpKeyResp, UserResp) {
  'use strict';

  /**
   * Contact service.
   * @module api/ContactApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContactApi. 
   * @alias module:api/ContactApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contactCreatePost operation.
     * @callback module:api/ContactApi~contactCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contact
     * Create new contact 
     * @param {module:model/ContactCreateReq} body 
     * @param {module:api/ContactApi~contactCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling contactCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactDeletePost operation.
     * @callback module:api/ContactApi~contactDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactDeleteRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete contact
     * Delete contact 
     * @param {module:model/IdsReq} body IDs of a contacts
     * @param {module:api/ContactApi~contactDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactDeleteRespItems>}
     */
    this.contactDeletePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling contactDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContactDeleteRespItems];

      return this.apiClient.callApi(
        '/contact/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactEditIdPost operation.
     * @callback module:api/ContactApi~contactEditIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact metadata
     * Get contact metadata 
     * @param {String} id ID of a contact
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactEditResp} opts.body 
     * @param {module:api/ContactApi~contactEditIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactEditIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactEditIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/edit/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactGet operation.
     * @callback module:api/ContactApi~contactGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user contacts
     * List user contacts 
     * @param {module:api/ContactApi~contactGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactResp>}
     */
    this.contactGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContactResp];

      return this.apiClient.callApi(
        '/contact', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactGroupGet operation.
     * @callback module:api/ContactApi~contactGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContactGroupRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All contact groups
     * List all contact groups 
     * @param {module:api/ContactApi~contactGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContactGroupRespItems>}
     */
    this.contactGroupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ContactGroupRespItems];

      return this.apiClient.callApi(
        '/contact/group', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactMetadataIdGet operation.
     * @callback module:api/ContactApi~contactMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact metadata
     * Get contact metadata 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactResp}
     */
    this.contactMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContactResp;

      return this.apiClient.callApi(
        '/contact/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactPgpKeyIdGet operation.
     * @callback module:api/ContactApi~contactPgpKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PgpKeyResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact PGP key
     * Get contact PGP key. Not used. 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactPgpKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PgpKeyResp}
     */
    this.contactPgpKeyIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactPgpKeyIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PgpKeyResp;

      return this.apiClient.callApi(
        '/contact/pgp-key/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contactUpgradeIdGet operation.
     * @callback module:api/ContactApi~contactUpgradeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade contact
     * Upgrade contact to user 
     * @param {String} id ID of a contact
     * @param {module:api/ContactApi~contactUpgradeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResp}
     */
    this.contactUpgradeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling contactUpgradeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserResp;

      return this.apiClient.callApi(
        '/contact/upgrade/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
