/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/ProfileRemoveMfaReq', 'model/ProfileRemoveMfaResp', 'model/ProfileSetMfaReq', 'model/ProfileSetMfaResp', 'model/SessionLoginPostResp', 'model/SessionLoginResp', 'model/UserRemoveMfaReq', 'model/UserResetMfaReq', 'model/UserSetMfaReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/ProfileRemoveMfaReq'), require('../model/ProfileRemoveMfaResp'), require('../model/ProfileSetMfaReq'), require('../model/ProfileSetMfaResp'), require('../model/SessionLoginPostResp'), require('../model/SessionLoginResp'), require('../model/UserRemoveMfaReq'), require('../model/UserResetMfaReq'), require('../model/UserSetMfaReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.MFAApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.ProfileRemoveMfaReq, root.QuatrixApi.ProfileRemoveMfaResp, root.QuatrixApi.ProfileSetMfaReq, root.QuatrixApi.ProfileSetMfaResp, root.QuatrixApi.SessionLoginPostResp, root.QuatrixApi.SessionLoginResp, root.QuatrixApi.UserRemoveMfaReq, root.QuatrixApi.UserResetMfaReq, root.QuatrixApi.UserSetMfaReq);
  }
}(this, function(ApiClient, ErrorModel, ProfileRemoveMfaReq, ProfileRemoveMfaResp, ProfileSetMfaReq, ProfileSetMfaResp, SessionLoginPostResp, SessionLoginResp, UserRemoveMfaReq, UserResetMfaReq, UserSetMfaReq) {
  'use strict';

  /**
   * MFA service.
   * @module api/MFAApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MFAApi. 
   * @alias module:api/MFAApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the profileRemoveMfaPost operation.
     * @callback module:api/MFAApi~profileRemoveMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable MFA for the logged-in user
     * Trun off MFA (multifactor authentication) for the user who requested 2FA deactivation while editing their profile. This operation is possible if it was not forced by the administrator. 
     * @param {module:model/ProfileRemoveMfaReq} body 
     * @param {module:api/MFAApi~profileRemoveMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.profileRemoveMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profileRemoveMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/profile/remove-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileSetMfaPost operation.
     * @callback module:api/MFAApi~profileSetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileSetMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable MFA for the logged-in user
     * Turn on MFA (multifactor authentication) for the user who requested 2FA activation while editing their profile. MFA adds an additional secure step on the way to log in to the account by using one more authentication method beyond the email and password. 
     * @param {module:model/ProfileSetMfaReq} body 
     * @param {module:api/MFAApi~profileSetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileSetMfaResp}
     */
    this.profileSetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profileSetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileSetMfaResp;

      return this.apiClient.callApi(
        '/profile/set-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLoginPost operation.
     * @callback module:api/MFAApi~sessionLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionLoginResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to the account using MFA
     * Use to generate a session login token in scenarios in which 2FA or PIN are required. 
     * @param {module:model/SessionLoginPostResp} body 
     * @param {module:api/MFAApi~sessionLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionLoginResp}
     */
    this.sessionLoginPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sessionLoginPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionLoginResp;

      return this.apiClient.callApi(
        '/session/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRemoveMfaPost operation.
     * @callback module:api/MFAApi~userRemoveMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable MFA for users
     * Deactivate MFA for a user by specified user ID. If 2FA is forced for the account, the user wonâ€™t be able to deactivate it using this API call. 
     * @param {module:model/UserRemoveMfaReq} body 
     * @param {module:api/MFAApi~userRemoveMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userRemoveMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userRemoveMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/remove-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userResetMfaPost operation.
     * @callback module:api/MFAApi~userResetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing MFA settings for users
     * Remove already set MFA code values, the MFA will be left activated. All logged-in sessions of users will be stopped. On the next login the user should set MFA again. 
     * @param {module:model/UserResetMfaReq} body 
     * @param {module:api/MFAApi~userResetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userResetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userResetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/reset-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userSetMfaPost operation.
     * @callback module:api/MFAApi~userSetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable MFA for users
     * Activate MFA for a user by specified user ID. If auth type is 2FA, the user will be forced to use MFA. All logged-in sessions of users will be stopped. 
     * @param {module:model/UserSetMfaReq} body 
     * @param {module:api/MFAApi~userSetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.userSetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userSetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/user/set-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
