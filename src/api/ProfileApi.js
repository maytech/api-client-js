/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/ProfileInfoResp', 'model/ProfileRemoveMfaReq', 'model/ProfileRemoveMfaResp', 'model/ProfileResp', 'model/ProfileSetMfaReq', 'model/ProfileSetMfaResp', 'model/ProfileSetPasswordReq', 'model/ProfileSetPasswordResp', 'model/ProfileSetReq', 'model/ProfileSetResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/ProfileInfoResp'), require('../model/ProfileRemoveMfaReq'), require('../model/ProfileRemoveMfaResp'), require('../model/ProfileResp'), require('../model/ProfileSetMfaReq'), require('../model/ProfileSetMfaResp'), require('../model/ProfileSetPasswordReq'), require('../model/ProfileSetPasswordResp'), require('../model/ProfileSetReq'), require('../model/ProfileSetResp'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ProfileApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.ProfileInfoResp, root.QuatrixApi.ProfileRemoveMfaReq, root.QuatrixApi.ProfileRemoveMfaResp, root.QuatrixApi.ProfileResp, root.QuatrixApi.ProfileSetMfaReq, root.QuatrixApi.ProfileSetMfaResp, root.QuatrixApi.ProfileSetPasswordReq, root.QuatrixApi.ProfileSetPasswordResp, root.QuatrixApi.ProfileSetReq, root.QuatrixApi.ProfileSetResp);
  }
}(this, function(ApiClient, ErrorModel, ProfileInfoResp, ProfileRemoveMfaReq, ProfileRemoveMfaResp, ProfileResp, ProfileSetMfaReq, ProfileSetMfaResp, ProfileSetPasswordReq, ProfileSetPasswordResp, ProfileSetReq, ProfileSetResp) {
  'use strict';

  /**
   * Profile service.
   * @module api/ProfileApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ProfileApi. 
   * @alias module:api/ProfileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the profile2faGenerateGet operation.
     * @callback module:api/ProfileApi~profile2faGenerateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new 2FA code
     * Generate a new verification code for 2FA with QR code. 
     * @param {module:api/ProfileApi~profile2faGenerateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.profile2faGenerateGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/profile/2fa/generate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileGet operation.
     * @callback module:api/ProfileApi~profileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile metadata
     * Retrieve profile information of the current user. 
     * @param {module:api/ProfileApi~profileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResp}
     */
    this.profileGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileResp;

      return this.apiClient.callApi(
        '/profile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileInfoGet operation.
     * @callback module:api/ProfileApi~profileInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve additional profile info
     * Get additional details about the account e.g. number of used and available user licenses. 
     * @param {module:api/ProfileApi~profileInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileInfoResp}
     */
    this.profileInfoGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileInfoResp;

      return this.apiClient.callApi(
        '/profile/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileRemoveMfaPost operation.
     * @callback module:api/ProfileApi~profileRemoveMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileRemoveMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable MFA for the logged-in user
     * Trun off MFA (multifactor authentication) for the user who requested 2FA deactivation while editing their profile. This operation is possible if it was not forced by the administrator. 
     * @param {module:model/ProfileRemoveMfaReq} body 
     * @param {module:api/ProfileApi~profileRemoveMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileRemoveMfaResp}
     */
    this.profileRemoveMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profileRemoveMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileRemoveMfaResp;

      return this.apiClient.callApi(
        '/profile/remove-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileSetMfaPost operation.
     * @callback module:api/ProfileApi~profileSetMfaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileSetMfaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable MFA for the logged-in user
     * Turn on MFA (multifactor authentication) for the user who requested 2FA activation while editing their profile. MFA adds an additional secure step on the way to log in to the account by using one more authentication method beyond the email and password. 
     * @param {module:model/ProfileSetMfaReq} body 
     * @param {module:api/ProfileApi~profileSetMfaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileSetMfaResp}
     */
    this.profileSetMfaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profileSetMfaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileSetMfaResp;

      return this.apiClient.callApi(
        '/profile/set-mfa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileSetPasswordPost operation.
     * @callback module:api/ProfileApi~profileSetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileSetPasswordResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change profile password
     * Change the account password for the logged-in user. 
     * @param {module:model/ProfileSetPasswordReq} body 
     * @param {module:api/ProfileApi~profileSetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileSetPasswordResp}
     */
    this.profileSetPasswordPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profileSetPasswordPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileSetPasswordResp;

      return this.apiClient.callApi(
        '/profile/set-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileSetPost operation.
     * @callback module:api/ProfileApi~profileSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileSetResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update profile metadata
     * Edit profile information of the current user including name, email, language and message signature. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProfileSetReq} opts.body 
     * @param {module:api/ProfileApi~profileSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileSetResp}
     */
    this.profileSetPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfileSetResp;

      return this.apiClient.callApi(
        '/profile/set', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
