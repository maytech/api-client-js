/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/API+Guide).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/FilesReturnMakedirReq', 'model/FilesReturnMakedirResps', 'model/FilesReturnMetadataResp', 'model/FilesReturnSendReq', 'model/FilesReturnSendResp', 'model/FilesReturnUploadLinkReq', 'model/FilesReturnUploadLinkResp', 'model/IdResp', 'model/JobResp', 'model/QuicklinkCreateReq', 'model/QuicklinkCreateResp', 'model/QuicklinkLoginPinReq', 'model/ShareCreateReq', 'model/ShareCreateResp', 'model/ShareDownloadInfoResp', 'model/ShareDownloadLinkReq', 'model/ShareLoginPinReq', 'model/ShareRecipientsResp', 'model/ShareRequestReq', 'model/ShareRequestResp', 'model/ShareSendRequestReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/FilesReturnMakedirReq'), require('../model/FilesReturnMakedirResps'), require('../model/FilesReturnMetadataResp'), require('../model/FilesReturnSendReq'), require('../model/FilesReturnSendResp'), require('../model/FilesReturnUploadLinkReq'), require('../model/FilesReturnUploadLinkResp'), require('../model/IdResp'), require('../model/JobResp'), require('../model/QuicklinkCreateReq'), require('../model/QuicklinkCreateResp'), require('../model/QuicklinkLoginPinReq'), require('../model/ShareCreateReq'), require('../model/ShareCreateResp'), require('../model/ShareDownloadInfoResp'), require('../model/ShareDownloadLinkReq'), require('../model/ShareLoginPinReq'), require('../model/ShareRecipientsResp'), require('../model/ShareRequestReq'), require('../model/ShareRequestResp'), require('../model/ShareSendRequestReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ShareApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.FilesReturnMakedirReq, root.QuatrixApi.FilesReturnMakedirResps, root.QuatrixApi.FilesReturnMetadataResp, root.QuatrixApi.FilesReturnSendReq, root.QuatrixApi.FilesReturnSendResp, root.QuatrixApi.FilesReturnUploadLinkReq, root.QuatrixApi.FilesReturnUploadLinkResp, root.QuatrixApi.IdResp, root.QuatrixApi.JobResp, root.QuatrixApi.QuicklinkCreateReq, root.QuatrixApi.QuicklinkCreateResp, root.QuatrixApi.QuicklinkLoginPinReq, root.QuatrixApi.ShareCreateReq, root.QuatrixApi.ShareCreateResp, root.QuatrixApi.ShareDownloadInfoResp, root.QuatrixApi.ShareDownloadLinkReq, root.QuatrixApi.ShareLoginPinReq, root.QuatrixApi.ShareRecipientsResp, root.QuatrixApi.ShareRequestReq, root.QuatrixApi.ShareRequestResp, root.QuatrixApi.ShareSendRequestReq);
  }
}(this, function(ApiClient, ErrorModel, FilesReturnMakedirReq, FilesReturnMakedirResps, FilesReturnMetadataResp, FilesReturnSendReq, FilesReturnSendResp, FilesReturnUploadLinkReq, FilesReturnUploadLinkResp, IdResp, JobResp, QuicklinkCreateReq, QuicklinkCreateResp, QuicklinkLoginPinReq, ShareCreateReq, ShareCreateResp, ShareDownloadInfoResp, ShareDownloadLinkReq, ShareLoginPinReq, ShareRecipientsResp, ShareRequestReq, ShareRequestResp, ShareSendRequestReq) {
  'use strict';

  /**
   * Share service.
   * @module api/ShareApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ShareApi. 
   * @alias module:api/ShareApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the filesReturnMakedirIdPost operation.
     * @callback module:api/ShareApi~filesReturnMakedirIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnMakedirResps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a directory for returned files
     * Add a directory for retuned files in the senderâ€™s file tree. In order to return a file tree structure, you should duplicate it on the server side, that is send this API call to create each folder separately. This call returns the ID response that can be used as the parent ID for creating a new folder in the already created folder. 
     * @param {String} id Share action ID
     * @param {module:model/FilesReturnMakedirReq} body 
     * @param {module:api/ShareApi~filesReturnMakedirIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnMakedirResps}
     */
    this.filesReturnMakedirIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnMakedirIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnMakedirIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnMakedirResps;

      return this.apiClient.callApi(
        '/files-return/makedir/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnMetadataIdGet operation.
     * @callback module:api/ShareApi~filesReturnMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnMetadataResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get return files metadata
     * Get the metadata of returning files. 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~filesReturnMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnMetadataResp}
     */
    this.filesReturnMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnMetadataResp;

      return this.apiClient.callApi(
        '/files-return/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnSendPost operation.
     * @callback module:api/ShareApi~filesReturnSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnSendResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return files in the created share
     * Return files to the share sender. 
     * @param {module:model/FilesReturnSendReq} body 
     * @param {module:api/ShareApi~filesReturnSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnSendResp}
     */
    this.filesReturnSendPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnSendPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnSendResp;

      return this.apiClient.callApi(
        '/files-return/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnUploadLinkIdPost operation.
     * @callback module:api/ShareApi~filesReturnUploadLinkIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnUploadLinkResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get return files upload link
     * Get the upload link to return files to the share sender. 
     * @param {String} id Share action ID
     * @param {module:model/FilesReturnUploadLinkReq} body 
     * @param {module:api/ShareApi~filesReturnUploadLinkIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnUploadLinkResp}
     */
    this.filesReturnUploadLinkIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnUploadLinkIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnUploadLinkIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnUploadLinkResp;

      return this.apiClient.callApi(
        '/files-return/upload-link/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkCreatePost operation.
     * @callback module:api/ShareApi~quicklinkCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuicklinkCreateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a quicklink
     * Create a quicklink with the usage behaviour the same as a public share. 
     * @param {module:model/QuicklinkCreateReq} body 
     * @param {module:api/ShareApi~quicklinkCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuicklinkCreateResp}
     */
    this.quicklinkCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling quicklinkCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuicklinkCreateResp;

      return this.apiClient.callApi(
        '/quicklink/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkLoginPinPost operation.
     * @callback module:api/ShareApi~quicklinkLoginPinPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in with PIN to access a quicklink
     * Log in using a previously generated PIN that was sent while creating the quicklink to have access to it. 
     * @param {module:model/QuicklinkLoginPinReq} body 
     * @param {module:api/ShareApi~quicklinkLoginPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.quicklinkLoginPinPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling quicklinkLoginPinPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quicklink/login-pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkRevokeIdGet operation.
     * @callback module:api/ShareApi~quicklinkRevokeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a quicklink
     * Disable access to a quicklink. 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~quicklinkRevokeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.quicklinkRevokeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quicklinkRevokeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/quicklink/revoke/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareCreatePost operation.
     * @callback module:api/ShareApi~shareCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareCreateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a file share
     * Create a share with files. File share types:           - P (public) - Anyone can download. Limited tracking - IP address only.           - T (tracked) - Any registered user/recipient can download. Full tracking.           - C (restricted) - Only the registered email recipient(s) can download. Full tracking. 
     * @param {module:model/ShareCreateReq} body 
     * @param {module:api/ShareApi~shareCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareCreateResp}
     */
    this.shareCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareCreateResp;

      return this.apiClient.callApi(
        '/share/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadIdGet operation.
     * @callback module:api/ShareApi~shareDownloadIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download share files
     * Download files requested in the share/download-link call. 
     * @param {String} id Download link ID
     * @param {module:api/ShareApi~shareDownloadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.shareDownloadIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/download/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadInfoIdGet operation.
     * @callback module:api/ShareApi~shareDownloadInfoIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareDownloadInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share download info
     * Get the share metadata by the given share action iD. File share types:           - P (public) - Anyone can download. Limited tracking - IP address only.           - T (tracked) - Any registered user/recipient can download. Full tracking.           - C (restricted) - Only the registered email recipient(s) can download. Full tracking. 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareDownloadInfoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareDownloadInfoResp}
     */
    this.shareDownloadInfoIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadInfoIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareDownloadInfoResp;

      return this.apiClient.callApi(
        '/share/download-info/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadLinkIdGet operation.
     * @callback module:api/ShareApi~shareDownloadLinkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get download link for all files
     * Retrieve a link for downloading all files. 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareDownloadLinkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareDownloadLinkIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadLinkIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/download-link/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadLinkIdPost operation.
     * @callback module:api/ShareApi~shareDownloadLinkIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get download link for specified files
     * Retrieve a link for downloading specified files. 
     * @param {String} id Share action ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ShareDownloadLinkReq} opts.body 
     * @param {module:api/ShareApi~shareDownloadLinkIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareDownloadLinkIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadLinkIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/download-link/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareFilesIdGet operation.
     * @callback module:api/ShareApi~shareFilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List shared files
     * Retrieve a list of shared files. 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareFilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.shareFilesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareFilesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/share/files/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareLoginPinPost operation.
     * @callback module:api/ShareApi~shareLoginPinPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in with PIN to access a share
     * Log in using a previously generated PIN that was sent while creating the share to have access to it. 
     * @param {module:model/ShareLoginPinReq} body 
     * @param {module:api/ShareApi~shareLoginPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.shareLoginPinPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareLoginPinPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/login-pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sharePreviewIdGet operation.
     * @callback module:api/ShareApi~sharePreviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview a shared file
     * Preview a shared file by given share file ID. 
     * @param {String} id Share file ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.size 
     * @param {module:api/ShareApi~sharePreviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sharePreviewIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sharePreviewIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/preview/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRecipientsGet operation.
     * @callback module:api/ShareApi~shareRecipientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareRecipientsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all contacts for the share
     * Retrieve a list of all recipients that can receive the share. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Search emails by the specified beginning.
     * @param {module:api/ShareApi~shareRecipientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareRecipientsResp}
     */
    this.shareRecipientsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareRecipientsResp;

      return this.apiClient.callApi(
        '/share/recipients', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRequestPost operation.
     * @callback module:api/ShareApi~shareRequestPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareRequestResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a request to share files
     * Send a file sharing request. 
     * @param {module:model/ShareRequestReq} body 
     * @param {module:api/ShareApi~shareRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareRequestResp}
     */
    this.shareRequestPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareRequestPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareRequestResp;

      return this.apiClient.callApi(
        '/share/request', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRevokeIdGet operation.
     * @callback module:api/ShareApi~shareRevokeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a share
     * Revoke access to a share 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareRevokeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareRevokeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareRevokeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/revoke/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSendRequestIdPost operation.
     * @callback module:api/ShareApi~shareSendRequestIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request files. Use /share/request API call instead.
     * Send a file sharing request. 
     * @param {String} id Share Request ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ShareSendRequestReq} opts.body 
     * @param {module:api/ShareApi~shareSendRequestIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResp}
     */
    this.shareSendRequestIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareSendRequestIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobResp;

      return this.apiClient.callApi(
        '/share/send-request/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingGet operation.
     * @callback module:api/ShareApi~trackingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List share actions metadata for all users
     * Retrieve the metadata of created shares and quicklinks of all users that can be managed by a logged-in user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date Share date timestamp
     * @param {module:api/ShareApi~trackingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.trackingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/tracking/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingIdGet operation.
     * @callback module:api/ShareApi~trackingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List share actions metadata for a user
     * Retrieve the metadata of created shares and quicklinks of a user by given user ID. 
     * @param {String} id User ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date Share date timestamp
     * @param {module:api/ShareApi~trackingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.trackingIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trackingIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/tracking/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
