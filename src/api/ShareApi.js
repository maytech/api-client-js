/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/FilesReturnMakedirReq', 'model/FilesReturnMakedirResps', 'model/FilesReturnMetadataResp', 'model/FilesReturnSendReq', 'model/FilesReturnSendResp', 'model/FilesReturnUploadLinkReq', 'model/FilesReturnUploadLinkResp', 'model/IdResp', 'model/JobResp', 'model/QuicklinkCreateReq', 'model/QuicklinkCreateResp', 'model/QuicklinkLoginPinReq', 'model/ShareCreateReq', 'model/ShareCreateResp', 'model/ShareDownloadInfoResp', 'model/ShareDownloadLinkReq', 'model/ShareFilesRespItems', 'model/ShareLoginPinReq', 'model/ShareRecipientsResp', 'model/ShareRequestReq', 'model/ShareRequestResp', 'model/ShareSendRequestReq', 'model/TrackingIdRespItems', 'model/TrackingRespItems'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/FilesReturnMakedirReq'), require('../model/FilesReturnMakedirResps'), require('../model/FilesReturnMetadataResp'), require('../model/FilesReturnSendReq'), require('../model/FilesReturnSendResp'), require('../model/FilesReturnUploadLinkReq'), require('../model/FilesReturnUploadLinkResp'), require('../model/IdResp'), require('../model/JobResp'), require('../model/QuicklinkCreateReq'), require('../model/QuicklinkCreateResp'), require('../model/QuicklinkLoginPinReq'), require('../model/ShareCreateReq'), require('../model/ShareCreateResp'), require('../model/ShareDownloadInfoResp'), require('../model/ShareDownloadLinkReq'), require('../model/ShareFilesRespItems'), require('../model/ShareLoginPinReq'), require('../model/ShareRecipientsResp'), require('../model/ShareRequestReq'), require('../model/ShareRequestResp'), require('../model/ShareSendRequestReq'), require('../model/TrackingIdRespItems'), require('../model/TrackingRespItems'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ShareApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.FilesReturnMakedirReq, root.QuatrixApi.FilesReturnMakedirResps, root.QuatrixApi.FilesReturnMetadataResp, root.QuatrixApi.FilesReturnSendReq, root.QuatrixApi.FilesReturnSendResp, root.QuatrixApi.FilesReturnUploadLinkReq, root.QuatrixApi.FilesReturnUploadLinkResp, root.QuatrixApi.IdResp, root.QuatrixApi.JobResp, root.QuatrixApi.QuicklinkCreateReq, root.QuatrixApi.QuicklinkCreateResp, root.QuatrixApi.QuicklinkLoginPinReq, root.QuatrixApi.ShareCreateReq, root.QuatrixApi.ShareCreateResp, root.QuatrixApi.ShareDownloadInfoResp, root.QuatrixApi.ShareDownloadLinkReq, root.QuatrixApi.ShareFilesRespItems, root.QuatrixApi.ShareLoginPinReq, root.QuatrixApi.ShareRecipientsResp, root.QuatrixApi.ShareRequestReq, root.QuatrixApi.ShareRequestResp, root.QuatrixApi.ShareSendRequestReq, root.QuatrixApi.TrackingIdRespItems, root.QuatrixApi.TrackingRespItems);
  }
}(this, function(ApiClient, ErrorModel, FilesReturnMakedirReq, FilesReturnMakedirResps, FilesReturnMetadataResp, FilesReturnSendReq, FilesReturnSendResp, FilesReturnUploadLinkReq, FilesReturnUploadLinkResp, IdResp, JobResp, QuicklinkCreateReq, QuicklinkCreateResp, QuicklinkLoginPinReq, ShareCreateReq, ShareCreateResp, ShareDownloadInfoResp, ShareDownloadLinkReq, ShareFilesRespItems, ShareLoginPinReq, ShareRecipientsResp, ShareRequestReq, ShareRequestResp, ShareSendRequestReq, TrackingIdRespItems, TrackingRespItems) {
  'use strict';

  /**
   * Share service.
   * @module api/ShareApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ShareApi. 
   * @alias module:api/ShareApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the filesReturnMakedirIdPost operation.
     * @callback module:api/ShareApi~filesReturnMakedirIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnMakedirResps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return files makedir
     * Create folder via return files 
     * @param {String} id Share action ID
     * @param {module:model/FilesReturnMakedirReq} body 
     * @param {module:api/ShareApi~filesReturnMakedirIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnMakedirResps}
     */
    this.filesReturnMakedirIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnMakedirIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnMakedirIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnMakedirResps;

      return this.apiClient.callApi(
        '/files-return/makedir/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnMetadataIdGet operation.
     * @callback module:api/ShareApi~filesReturnMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnMetadataResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get return files metadata
     * Get return files metadata 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~filesReturnMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnMetadataResp}
     */
    this.filesReturnMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnMetadataResp;

      return this.apiClient.callApi(
        '/files-return/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnSendPost operation.
     * @callback module:api/ShareApi~filesReturnSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnSendResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send return files share
     * Create and send return files share 
     * @param {module:model/FilesReturnSendReq} body 
     * @param {module:api/ShareApi~filesReturnSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnSendResp}
     */
    this.filesReturnSendPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnSendPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnSendResp;

      return this.apiClient.callApi(
        '/files-return/send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filesReturnUploadLinkIdPost operation.
     * @callback module:api/ShareApi~filesReturnUploadLinkIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesReturnUploadLinkResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get return files upload link
     * Get return files upload link 
     * @param {String} id Share action ID
     * @param {module:model/FilesReturnUploadLinkReq} body 
     * @param {module:api/ShareApi~filesReturnUploadLinkIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesReturnUploadLinkResp}
     */
    this.filesReturnUploadLinkIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filesReturnUploadLinkIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filesReturnUploadLinkIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesReturnUploadLinkResp;

      return this.apiClient.callApi(
        '/files-return/upload-link/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkCreatePost operation.
     * @callback module:api/ShareApi~quicklinkCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuicklinkCreateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create quicklink
     * Creating public share with no recipients 
     * @param {module:model/QuicklinkCreateReq} body 
     * @param {module:api/ShareApi~quicklinkCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuicklinkCreateResp}
     */
    this.quicklinkCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling quicklinkCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuicklinkCreateResp;

      return this.apiClient.callApi(
        '/quicklink/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkLoginPinPost operation.
     * @callback module:api/ShareApi~quicklinkLoginPinPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with PIN on quicklink
     * Login on quicklink protected with PIN 
     * @param {module:model/QuicklinkLoginPinReq} body 
     * @param {module:api/ShareApi~quicklinkLoginPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.quicklinkLoginPinPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling quicklinkLoginPinPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/quicklink/login-pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quicklinkRevokeIdGet operation.
     * @callback module:api/ShareApi~quicklinkRevokeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke quicklink
     * Revoke quicklink 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~quicklinkRevokeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.quicklinkRevokeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quicklinkRevokeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/quicklink/revoke/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareCreatePost operation.
     * @callback module:api/ShareApi~shareCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareCreateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create share
     * Create share 
     * @param {module:model/ShareCreateReq} body 
     * @param {module:api/ShareApi~shareCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareCreateResp}
     */
    this.shareCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareCreateResp;

      return this.apiClient.callApi(
        '/share/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadIdGet operation.
     * @callback module:api/ShareApi~shareDownloadIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download share files
     * Download share files content 
     * @param {String} id Download link ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.files File ids
     * @param {module:api/ShareApi~shareDownloadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.shareDownloadIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'files': {
          value: opts['files'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/download/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadInfoIdGet operation.
     * @callback module:api/ShareApi~shareDownloadInfoIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareDownloadInfoResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share download info
     * Get share download info 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareDownloadInfoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareDownloadInfoResp}
     */
    this.shareDownloadInfoIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadInfoIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareDownloadInfoResp;

      return this.apiClient.callApi(
        '/share/download-info/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadLinkIdGet operation.
     * @callback module:api/ShareApi~shareDownloadLinkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download link
     * Download link for all files 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareDownloadLinkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareDownloadLinkIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadLinkIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/download-link/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareDownloadLinkIdPost operation.
     * @callback module:api/ShareApi~shareDownloadLinkIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download link
     * Download link for selected files 
     * @param {String} id Share action ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ShareDownloadLinkReq} opts.body 
     * @param {module:api/ShareApi~shareDownloadLinkIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareDownloadLinkIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareDownloadLinkIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/download-link/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareFilesIdGet operation.
     * @callback module:api/ShareApi~shareFilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShareFilesRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share files
     * List share files 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareFilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShareFilesRespItems>}
     */
    this.shareFilesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareFilesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ShareFilesRespItems];

      return this.apiClient.callApi(
        '/share/files/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareLoginPinPost operation.
     * @callback module:api/ShareApi~shareLoginPinPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with pin on share
     * Login with pin on share protected with pin 
     * @param {module:model/ShareLoginPinReq} body 
     * @param {module:api/ShareApi~shareLoginPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.shareLoginPinPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareLoginPinPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/login-pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sharePreviewIdGet operation.
     * @callback module:api/ShareApi~sharePreviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview share file
     * Preview share file 
     * @param {String} id Share file ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.size 
     * @param {module:api/ShareApi~sharePreviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sharePreviewIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sharePreviewIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/share/preview/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRecipientsGet operation.
     * @callback module:api/ShareApi~shareRecipientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareRecipientsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share recipinets
     * List share available recipients 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Start of recipient email
     * @param {module:api/ShareApi~shareRecipientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareRecipientsResp}
     */
    this.shareRecipientsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareRecipientsResp;

      return this.apiClient.callApi(
        '/share/recipients', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRequestPost operation.
     * @callback module:api/ShareApi~shareRequestPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareRequestResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request share
     * Request share 
     * @param {module:model/ShareRequestReq} body 
     * @param {module:api/ShareApi~shareRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareRequestResp}
     */
    this.shareRequestPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareRequestPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareRequestResp;

      return this.apiClient.callApi(
        '/share/request', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareRevokeIdGet operation.
     * @callback module:api/ShareApi~shareRevokeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke share
     * Revoke share 
     * @param {String} id Share action ID
     * @param {module:api/ShareApi~shareRevokeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.shareRevokeIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareRevokeIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/share/revoke/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSendRequestIdPost operation.
     * @callback module:api/ShareApi~shareSendRequestIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED! Use /share/request instead.
     * Send share request email 
     * @param {String} id Share Request ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ShareSendRequestReq} opts.body 
     * @param {module:api/ShareApi~shareSendRequestIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResp}
     */
    this.shareSendRequestIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shareSendRequestIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobResp;

      return this.apiClient.callApi(
        '/share/send-request/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingGet operation.
     * @callback module:api/ShareApi~trackingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List share actions
     * List share actions 
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date Share date timestamp
     * @param {module:api/ShareApi~trackingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingRespItems>}
     */
    this.trackingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrackingRespItems];

      return this.apiClient.callApi(
        '/tracking/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trackingIdGet operation.
     * @callback module:api/ShareApi~trackingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackingIdRespItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List share actions
     * List share actions 
     * @param {String} id User id
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date Share date timestamp
     * @param {module:api/ShareApi~trackingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrackingIdRespItems>}
     */
    this.trackingIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trackingIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TrackingIdRespItems];

      return this.apiClient.callApi(
        '/tracking/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
