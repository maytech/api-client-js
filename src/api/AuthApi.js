/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/API+Guide).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/SessionLoginPostResp', 'model/SessionLoginResp', 'model/SessionUnblockCaptchaResp', 'model/UnblockCaptchaReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/SessionLoginPostResp'), require('../model/SessionLoginResp'), require('../model/SessionUnblockCaptchaResp'), require('../model/UnblockCaptchaReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.AuthApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.SessionLoginPostResp, root.QuatrixApi.SessionLoginResp, root.QuatrixApi.SessionUnblockCaptchaResp, root.QuatrixApi.UnblockCaptchaReq);
  }
}(this, function(ApiClient, ErrorModel, SessionLoginPostResp, SessionLoginResp, SessionUnblockCaptchaResp, UnblockCaptchaReq) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the sessionKeepaliveGet operation.
     * @callback module:api/AuthApi~sessionKeepaliveGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh session expiration time
     * Refresh the existing session using the ID for the session. The session will expire if there were no API actions for 15 minutes. 
     * @param {module:api/AuthApi~sessionKeepaliveGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionKeepaliveGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session/keepalive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLoginGet operation.
     * @callback module:api/AuthApi~sessionLoginGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionLoginResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in and get session ID details
     * Get session information for the given session ID and log in to the account.  The easiest way to authenticate is using [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).  To proceed with the authorization, you need to have Quatrix account. If you donâ€™t have the one, you can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial&#x3D;qtrx).  As the basic authentication requires the authentication of the user with the user ID and password, the Authorization header should be constructed as follows:    1. The user email and password are combined with a single colon. (:)    2. The resulting string is encoded using a variant of Base64.    3. The authorization method and a space is then prepended to the encoded string, separated with a space (e.g. \&quot;Basic \&quot;).    For example, &#39;test@example.com&#39; as the user email and &#39;qwerty&#39; as the password, then the field&#39;s value is the following:    base64-encoding of test@example.com:qwerty, or dGVzdEBleGFtcGxlLmNvbTpxd2VydHk&#x3D;.    The authorization header will appear as    &#39;Authorization: Basic dGVzdEBleGFtcGxlLmNvbTpxd2VydHk&#x3D;&#39; 
     * @param {module:api/AuthApi~sessionLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionLoginResp}
     */
    this.sessionLoginGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionLoginResp;

      return this.apiClient.callApi(
        '/session/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLoginPost operation.
     * @callback module:api/AuthApi~sessionLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionLoginResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to the account using MFA
     * Use to generate a session login token in scenarios in which 2FA or PIN are required. 
     * @param {module:model/SessionLoginPostResp} body 
     * @param {module:api/AuthApi~sessionLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionLoginResp}
     */
    this.sessionLoginPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sessionLoginPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionLoginResp;

      return this.apiClient.callApi(
        '/session/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLogoutGet operation.
     * @callback module:api/AuthApi~sessionLogoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close the user&#39;s session
     * Close the session for the currently logged in user. 
     * @param {module:api/AuthApi~sessionLogoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionLogoutGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session/logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionUnblockCaptchaPost operation.
     * @callback module:api/AuthApi~sessionUnblockCaptchaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionUnblockCaptchaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock the session using CAPTCHA
     * Enter CAPTCHA to log in the user to the current session. 
     * @param {module:model/UnblockCaptchaReq} body 
     * @param {module:api/AuthApi~sessionUnblockCaptchaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionUnblockCaptchaResp}
     */
    this.sessionUnblockCaptchaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sessionUnblockCaptchaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionUnblockCaptchaResp;

      return this.apiClient.callApi(
        '/session/unblock-captcha', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
