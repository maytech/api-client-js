/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/SessionLoginPostResp', 'model/SessionLoginResp', 'model/SessionUnblockCaptchaResp', 'model/UnblockCaptchaReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/SessionLoginPostResp'), require('../model/SessionLoginResp'), require('../model/SessionUnblockCaptchaResp'), require('../model/UnblockCaptchaReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.AuthApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.SessionLoginPostResp, root.QuatrixApi.SessionLoginResp, root.QuatrixApi.SessionUnblockCaptchaResp, root.QuatrixApi.UnblockCaptchaReq);
  }
}(this, function(ApiClient, ErrorModel, SessionLoginPostResp, SessionLoginResp, SessionUnblockCaptchaResp, UnblockCaptchaReq) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the sessionKeepaliveGet operation.
     * @callback module:api/AuthApi~sessionKeepaliveGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Keepalive
     * Keep alive current session 
     * @param {module:api/AuthApi~sessionKeepaliveGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionKeepaliveGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session/keepalive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLoginGet operation.
     * @callback module:api/AuthApi~sessionLoginGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionLoginResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login and get session ID
     * Basic Authentication with the Authorization header The Authorization header is constructed as follows   1. The user email and password are combined with a single colon. (:)   2. The resulting string is encoded using a variant of Base64.   3. The authorization method and a space is then prepended to the encoded string, separated with a space (e.g. \&quot;Basic \&quot;).   For example, &#39;test@example.com&#39; as the user email and &#39;qwerty&#39; as the password, then the field&#39;s value is the   base64-encoding of test@example.com:qwerty, or dGVzdEBleGFtcGxlLmNvbTpxd2VydHk&#x3D;.   Then the Authorization header will appear as   &#39;Authorization: Basic dGVzdEBleGFtcGxlLmNvbTpxd2VydHk&#x3D;&#39; 
     * @param {module:api/AuthApi~sessionLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionLoginResp}
     */
    this.sessionLoginGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionLoginResp;

      return this.apiClient.callApi(
        '/session/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLoginPost operation.
     * @callback module:api/AuthApi~sessionLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionLoginResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * MFA
     * Login with MFA 
     * @param {module:model/SessionLoginPostResp} body 
     * @param {module:api/AuthApi~sessionLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionLoginResp}
     */
    this.sessionLoginPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sessionLoginPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionLoginResp;

      return this.apiClient.callApi(
        '/session/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionLogoutGet operation.
     * @callback module:api/AuthApi~sessionLogoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Logout of current session 
     * @param {module:api/AuthApi~sessionLogoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sessionLogoutGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/session/logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionUnblockCaptchaPost operation.
     * @callback module:api/AuthApi~sessionUnblockCaptchaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionUnblockCaptchaResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock captcha
     * Unblock captcha 
     * @param {module:model/UnblockCaptchaReq} body 
     * @param {module:api/AuthApi~sessionUnblockCaptchaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionUnblockCaptchaResp}
     */
    this.sessionUnblockCaptchaPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sessionUnblockCaptchaPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SessionUnblockCaptchaResp;

      return this.apiClient.callApi(
        '/session/unblock-captcha', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
