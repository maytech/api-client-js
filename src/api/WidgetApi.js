/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/SettingsUploadLogoLinkResp', 'model/WidgetFinalizeUploadResp', 'model/WidgetMakedirReq', 'model/WidgetMakedirResp', 'model/WidgetMakedirResp1', 'model/WidgetMetadataResp', 'model/WidgetUploadLinkReq', 'model/WindgetUnblockCaptchaReq'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/SettingsUploadLogoLinkResp'), require('../model/WidgetFinalizeUploadResp'), require('../model/WidgetMakedirReq'), require('../model/WidgetMakedirResp'), require('../model/WidgetMakedirResp1'), require('../model/WidgetMetadataResp'), require('../model/WidgetUploadLinkReq'), require('../model/WindgetUnblockCaptchaReq'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.WidgetApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.SettingsUploadLogoLinkResp, root.QuatrixApi.WidgetFinalizeUploadResp, root.QuatrixApi.WidgetMakedirReq, root.QuatrixApi.WidgetMakedirResp, root.QuatrixApi.WidgetMakedirResp1, root.QuatrixApi.WidgetMetadataResp, root.QuatrixApi.WidgetUploadLinkReq, root.QuatrixApi.WindgetUnblockCaptchaReq);
  }
}(this, function(ApiClient, ErrorModel, SettingsUploadLogoLinkResp, WidgetFinalizeUploadResp, WidgetMakedirReq, WidgetMakedirResp, WidgetMakedirResp1, WidgetMetadataResp, WidgetUploadLinkReq, WindgetUnblockCaptchaReq) {
  'use strict';

  /**
   * Widget service.
   * @module api/WidgetApi
   * @version 1.0.0
   */

  /**
   * Constructs a new WidgetApi. 
   * @alias module:api/WidgetApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the widgetFinalizeUploadIdGet operation.
     * @callback module:api/WidgetApi~widgetFinalizeUploadIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetFinalizeUploadResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finalize chunked upload of the widget
     * Complete the chunked upload of the widget. 
     * @param {String} id Upload key
     * @param {module:api/WidgetApi~widgetFinalizeUploadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetFinalizeUploadResp}
     */
    this.widgetFinalizeUploadIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling widgetFinalizeUploadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetFinalizeUploadResp;

      return this.apiClient.callApi(
        '/widget/finalize-upload/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the widgetMakedirIdPost operation.
     * @callback module:api/WidgetApi~widgetMakedirIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetMakedirResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a subfolder in the widget folder
     * Creates a new folder in the widget directory and returns the ID that can be used to upload a file or create a subfolder. If the folder exists already under the selected parent, it will return the existing ID. Required passed captcha 
     * @param {String} id ID of a widget
     * @param {module:model/WidgetMakedirReq} body 
     * @param {module:api/WidgetApi~widgetMakedirIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetMakedirResp}
     */
    this.widgetMakedirIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling widgetMakedirIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling widgetMakedirIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetMakedirResp;

      return this.apiClient.callApi(
        '/widget/makedir/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the widgetMetadataIdGet operation.
     * @callback module:api/WidgetApi~widgetMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetMetadataResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all widget metadata
     * Retrieve available metadata of the widget. 
     * @param {String} id ID of a widget
     * @param {module:api/WidgetApi~widgetMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetMetadataResp}
     */
    this.widgetMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling widgetMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetMetadataResp;

      return this.apiClient.callApi(
        '/widget/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the widgetUnblockCaptchaIdPost operation.
     * @callback module:api/WidgetApi~widgetUnblockCaptchaIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetMakedirResp1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock the widget CAPTCHA
     * Unblock the widget CAPTCHA 
     * @param {String} id ID of a widget
     * @param {module:model/WindgetUnblockCaptchaReq} body 
     * @param {module:api/WidgetApi~widgetUnblockCaptchaIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetMakedirResp1}
     */
    this.widgetUnblockCaptchaIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling widgetUnblockCaptchaIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling widgetUnblockCaptchaIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WidgetMakedirResp1;

      return this.apiClient.callApi(
        '/widget/unblock-captcha/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the widgetUploadLinkIdPost operation.
     * @callback module:api/WidgetApi~widgetUploadLinkIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsUploadLogoLinkResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get widget upload link
     * Retrieve a link for uploading the file via widget. Required passed captcha 
     * @param {String} id ID of a widget
     * @param {module:model/WidgetUploadLinkReq} body 
     * @param {module:api/WidgetApi~widgetUploadLinkIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsUploadLogoLinkResp}
     */
    this.widgetUploadLinkIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling widgetUploadLinkIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling widgetUploadLinkIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingsUploadLogoLinkResp;

      return this.apiClient.callApi(
        '/widget/upload-link/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
