/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/IdResp', 'model/PfCreateResp', 'model/PfMetadataResp', 'model/PfSetUsersReq', 'model/PfUsersListReq', 'model/PfaddUsersReq', 'model/PfcreateReq', 'model/PfdeleteUsersReq', 'model/PfeditUsersReq', 'model/UserPermissionResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/IdResp'), require('../model/PfCreateResp'), require('../model/PfMetadataResp'), require('../model/PfSetUsersReq'), require('../model/PfUsersListReq'), require('../model/PfaddUsersReq'), require('../model/PfcreateReq'), require('../model/PfdeleteUsersReq'), require('../model/PfeditUsersReq'), require('../model/UserPermissionResp'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.ProjectFolderApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.IdResp, root.QuatrixApi.PfCreateResp, root.QuatrixApi.PfMetadataResp, root.QuatrixApi.PfSetUsersReq, root.QuatrixApi.PfUsersListReq, root.QuatrixApi.PfaddUsersReq, root.QuatrixApi.PfcreateReq, root.QuatrixApi.PfdeleteUsersReq, root.QuatrixApi.PfeditUsersReq, root.QuatrixApi.UserPermissionResp);
  }
}(this, function(ApiClient, ErrorModel, IdResp, PfCreateResp, PfMetadataResp, PfSetUsersReq, PfUsersListReq, PfaddUsersReq, PfcreateReq, PfdeleteUsersReq, PfeditUsersReq, UserPermissionResp) {
  'use strict';

  /**
   * ProjectFolder service.
   * @module api/ProjectFolderApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ProjectFolderApi. 
   * @alias module:api/ProjectFolderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the projectFolderAddUsersIdPost operation.
     * @callback module:api/ProjectFolderApi~projectFolderAddUsersIdPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserPermissionResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to the project folder
     * Add users to the specified project folder. 
     * @param {String} id 
     * @param {module:model/PfaddUsersReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderAddUsersIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserPermissionResp>}
     */
    this.projectFolderAddUsersIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectFolderAddUsersIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderAddUsersIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserPermissionResp];

      return this.apiClient.callApi(
        '/project-folder/add-users/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderCreatePost operation.
     * @callback module:api/ProjectFolderApi~projectFolderCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfCreateResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project folder
     * Create a new project folder for a user. Learn more how to create a project folder in our [API guide](https://docs.maytech.net/display/MD/Creating+Project+Folders). 
     * @param {module:model/PfcreateReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfCreateResp}
     */
    this.projectFolderCreatePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderCreatePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfCreateResp;

      return this.apiClient.callApi(
        '/project-folder/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderDeleteIdGet operation.
     * @callback module:api/ProjectFolderApi~projectFolderDeleteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a project folder to a folder
     * Convert the project folder to regular folder keeping the same name and location. 
     * @param {String} id 
     * @param {module:api/ProjectFolderApi~projectFolderDeleteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdResp}
     */
    this.projectFolderDeleteIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectFolderDeleteIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdResp;

      return this.apiClient.callApi(
        '/project-folder/delete/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderDeleteUsersPost operation.
     * @callback module:api/ProjectFolderApi~projectFolderDeleteUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove project folder users
     * Delete users of the given project folder. 
     * @param {module:model/PfdeleteUsersReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderDeleteUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.projectFolderDeleteUsersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderDeleteUsersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/project-folder/delete-users/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderEditUsersIdPost operation.
     * @callback module:api/ProjectFolderApi~projectFolderEditUsersIdPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserPermissionResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update users’ permissions of the project folder
     * Edit users’ permissions of the given project folder. 
     * @param {String} id 
     * @param {module:model/PfeditUsersReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderEditUsersIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserPermissionResp>}
     */
    this.projectFolderEditUsersIdPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectFolderEditUsersIdPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderEditUsersIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserPermissionResp];

      return this.apiClient.callApi(
        '/project-folder/edit-users/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderGet operation.
     * @callback module:api/ProjectFolderApi~projectFolderGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available project folders for a logged-in user
     * Retrieve a list of all project folders of a current logged-in user. 
     * @param {module:api/ProjectFolderApi~projectFolderGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.projectFolderGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/project-folder', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderMetadataIdGet operation.
     * @callback module:api/ProjectFolderApi~projectFolderMetadataIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfMetadataResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project folder metadata
     * Retrieve the metadata of the project folder. 
     * @param {String} id project folder ID
     * @param {module:api/ProjectFolderApi~projectFolderMetadataIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfMetadataResp}
     */
    this.projectFolderMetadataIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectFolderMetadataIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfMetadataResp;

      return this.apiClient.callApi(
        '/project-folder/metadata/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderProjectUsersPost operation.
     * @callback module:api/ProjectFolderApi~projectFolderProjectUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all project folders for given users
     * Get a list of all project folders for given users. 
     * @param {module:model/PfUsersListReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderProjectUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.projectFolderProjectUsersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderProjectUsersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/project-folder/project-users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderSetUsersPost operation.
     * @callback module:api/ProjectFolderApi~projectFolderSetUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to project folders.
     * Add users to specified project folders. If the users exist in the given project folder, their permissions will be updated based on given parameters. 
     * @param {module:model/PfSetUsersReq} body 
     * @param {module:api/ProjectFolderApi~projectFolderSetUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.projectFolderSetUsersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectFolderSetUsersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/project-folder/set-users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectFolderUsersIdGet operation.
     * @callback module:api/ProjectFolderApi~projectFolderUsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserPermissionResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users of the project folder
     * Retrieve a list of users by given project folder ID. 
     * @param {String} id project folder ID
     * @param {module:api/ProjectFolderApi~projectFolderUsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserPermissionResp>}
     */
    this.projectFolderUsersIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectFolderUsersIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserPermissionResp];

      return this.apiClient.callApi(
        '/project-folder/users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
