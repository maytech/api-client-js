/**
 * Quatrix API
 * Download and upload files or folders, share them with predefined security options, manage your account and profile settings and a lot more functionalities can be easily integrated into your application using our Quatrix APIs. Learn more how to authenticate the Quatrix session, how to construct JSON formatted API calls and what responses to expect in our [API Guide](https://docs.maytech.net/display/MD/Quatrix+API).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/SettingsResp', 'model/SettingsSetReq', 'model/SettingsUploadLogoLinkResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/SettingsResp'), require('../model/SettingsSetReq'), require('../model/SettingsUploadLogoLinkResp'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.SiteSettingsApi = factory(root.QuatrixApi.ApiClient, root.QuatrixApi.ErrorModel, root.QuatrixApi.SettingsResp, root.QuatrixApi.SettingsSetReq, root.QuatrixApi.SettingsUploadLogoLinkResp);
  }
}(this, function(ApiClient, ErrorModel, SettingsResp, SettingsSetReq, SettingsUploadLogoLinkResp) {
  'use strict';

  /**
   * SiteSettings service.
   * @module api/SiteSettingsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SiteSettingsApi. 
   * @alias module:api/SiteSettingsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the settingsAuthMethodsGet operation.
     * @callback module:api/SiteSettingsApi~settingsAuthMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available authentication methods
     * Get available authentication methods that can be set for the account. 
     * @param {module:api/SiteSettingsApi~settingsAuthMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.settingsAuthMethodsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/settings/auth-methods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsGet operation.
     * @callback module:api/SiteSettingsApi~settingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site settings
     * Retrieve information about the service settings adjusted for the account e.g. language, banner text, email footer, billing emails, PGP, permitted share types. 
     * @param {module:api/SiteSettingsApi~settingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsResp}
     */
    this.settingsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingsResp;

      return this.apiClient.callApi(
        '/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsSetPost operation.
     * @callback module:api/SiteSettingsApi~settingsSetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set site settings
     * Update service settings for the account e.g. enable or disable PGP, force 2FA for all users of the account. 
     * @param {module:model/SettingsSetReq} body 
     * @param {module:api/SiteSettingsApi~settingsSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsResp}
     */
    this.settingsSetPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling settingsSetPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingsResp;

      return this.apiClient.callApi(
        '/settings/set', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsUploadLogoLinkGet operation.
     * @callback module:api/SiteSettingsApi~settingsUploadLogoLinkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsUploadLogoLinkResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a new logo upload link
     * Get a unique key for uploading a new logo 
     * @param {module:api/SiteSettingsApi~settingsUploadLogoLinkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsUploadLogoLinkResp}
     */
    this.settingsUploadLogoLinkGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingsUploadLogoLinkResp;

      return this.apiClient.callApi(
        '/settings/upload-logo-link', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
