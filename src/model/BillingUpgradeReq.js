/**
 * Quatrix API
 * The Quatrix API enables you to automate your interaction with Quatrix using any scripting or programming language. You can test API calls on [Swagger](https://docs.maytech.net/swagger/), the interactive environment we use as the repository for the Quatrix API. In order to authorize to Quatrix API you will need to have a Quatrix account https://yourcompanyname.quatrix.it/ (e.g. https://test-api.quatrix.it/). You can set up a free trial account [here](https://www.maytech.net/freetrial.html#trial=qtrx). Below you'll find information on how to authenticate in a Quatrix session, how to construct JSON formatted API call and what JSON responses to expect.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.QuatrixApi) {
      root.QuatrixApi = {};
    }
    root.QuatrixApi.BillingUpgradeReq = factory(root.QuatrixApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BillingUpgradeReq model module.
   * @module model/BillingUpgradeReq
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>BillingUpgradeReq</code>.
   * @alias module:model/BillingUpgradeReq
   * @class
   * @param currency {module:model/BillingUpgradeReq.CurrencyEnum} 
   * @param renewalPeriod {module:model/BillingUpgradeReq.RenewalPeriodEnum} 
   */
  var exports = function(currency, renewalPeriod) {
    var _this = this;



    _this['currency'] = currency;
    _this['renewal_period'] = renewalPeriod;


  };

  /**
   * Constructs a <code>BillingUpgradeReq</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BillingUpgradeReq} obj Optional instance to populate.
   * @return {module:model/BillingUpgradeReq} The populated <code>BillingUpgradeReq</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('qx_max_users')) {
        obj['qx_max_users'] = ApiClient.convertToType(data['qx_max_users'], 'Number');
      }
      if (data.hasOwnProperty('sftp_max_users')) {
        obj['sftp_max_users'] = ApiClient.convertToType(data['sftp_max_users'], 'Number');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('renewal_period')) {
        obj['renewal_period'] = ApiClient.convertToType(data['renewal_period'], 'String');
      }
      if (data.hasOwnProperty('recurring_renewal')) {
        obj['recurring_renewal'] = ApiClient.convertToType(data['recurring_renewal'], 'Boolean');
      }
      if (data.hasOwnProperty('package_keys')) {
        obj['package_keys'] = ApiClient.convertToType(data['package_keys'], ['String']);
      }
    }
    return obj;
  }

  /**
   * @member {Number} qx_max_users
   */
  exports.prototype['qx_max_users'] = undefined;
  /**
   * @member {Number} sftp_max_users
   */
  exports.prototype['sftp_max_users'] = undefined;
  /**
   * @member {module:model/BillingUpgradeReq.CurrencyEnum} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * @member {module:model/BillingUpgradeReq.RenewalPeriodEnum} renewal_period
   */
  exports.prototype['renewal_period'] = undefined;
  /**
   * @member {Boolean} recurring_renewal
   */
  exports.prototype['recurring_renewal'] = undefined;
  /**
   * package keys
   * @member {Array.<String>} package_keys
   */
  exports.prototype['package_keys'] = undefined;


  /**
   * Allowed values for the <code>currency</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CurrencyEnum = {
    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",
    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",
    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR"  };

  /**
   * Allowed values for the <code>renewal_period</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RenewalPeriodEnum = {
    /**
     * value: "1 month"
     * @const
     */
    "month": "1 month",
    /**
     * value: "1 year"
     * @const
     */
    "year": "1 year"  };


  return exports;
}));


